OBJECT Codeunit 137069 SCM Production Orders
{
  OBJECT-PROPERTIES
  {
    Date=28.04.17;
    Time=12:00:00;
    Version List=NAVW110.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    TestPermissions=Disabled;
    OnRun=BEGIN
            Initialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ConsumptionItemJournalTemplate@1016 : Record 82;
      ConsumptionItemJournalBatch@1011 : Record 233;
      ItemJournalTemplate@1015 : Record 82;
      ItemJournalBatch@1014 : Record 233;
      OutputItemJournalTemplate@1026 : Record 82;
      OutputItemJournalBatch@1025 : Record 233;
      LocationSilver@1035 : Record 14;
      LocationGreen@1034 : Record 14;
      LocationBlue@1028 : Record 14;
      LocationWhite@1033 : Record 14;
      LibraryERM@1050 : Codeunit 131300;
      LibraryVariableStorage@1018 : Codeunit 131004;
      LibraryPurchase@1005 : Codeunit 130512;
      LibraryInventory@1009 : Codeunit 132201;
      LibraryItemTracking@1044 : Codeunit 130502;
      LibraryManufacturing@1008 : Codeunit 132202;
      LibraryPlanning@1007 : Codeunit 132203;
      LibraryDimension@1004 : Codeunit 131001;
      LibrarySales@1049 : Codeunit 130509;
      LibraryUtility@1006 : Codeunit 131000;
      LibraryWarehouse@1027 : Codeunit 132204;
      LibraryPatterns@1042 : Codeunit 132212;
      LibraryRandom@1000 : Codeunit 130440;
      Assert@1012 : Codeunit 130000;
      ProductionJournalMgt@1036 : Codeunit 5510;
      CalendarMgt@1060 : Codeunit 99000755;
      Initialized@1001 : Boolean;
      UpdateDimensionMethod@1037 : 'ByProductionOrderLine,ByShowDimensionsOnLine,ByProductionOrder';
      AvailabilityWarningsMsg@1002 : TextConst 'ENU=There are availability warnings on one or more lines.';
      CaptionErr@1003 : TextConst 'ENU=Caption must be the same.';
      SummaryTypeItemLedgerEntryTxt@1010 : TextConst 'ENU=Item Ledger Entry';
      SummaryTypePurchaseLineOrderTxt@1017 : TextConst 'ENU=Purchase Line, Order';
      FirmPlannedProdOrderCreatedTxt@1019 : TextConst 'ENU=Firm Planned Prod. Order';
      SerialNoErr@1020 : TextConst 'ENU=Serial No does not exist.';
      NumberOfLineEqualErr@1021 : TextConst 'ENU=Number of Lines must be same.';
      QtyToHandleErr@1022 : TextConst 'ENU=Qty. to Handle (Base) in Tracking Specification for Item No';
      LotNoErr@1024 : TextConst '@@@=%1 - Item No.;ENU=You must assign a lot number for item %1.';
      ProductionBOMCertifiedStatusErr@1023 : TextConst 'ENU=Status must be equal to ''Certified''  in Production BOM Header';
      ProductionOrderErr@1029 : TextConst 'ENU=The Production Order does not exist';
      ProductionOrderFinishedStatusMsg@1030 : TextConst 'ENU=Some consumption is still missing. Do you still want to finish the order?';
      ProductionOrderNotExistErr@1031 : TextConst 'ENU=There is no Production Order within the filter';
      NothingToPlanMsg@1032 : TextConst 'ENU=There is nothing to plan';
      JournalLinePostedMsg@1038 : TextConst 'ENU=The journal lines were successfully posted.';
      ValuedQtyErr@1040 : TextConst 'ENU=Valued Quantity in posted Value Entry is incorrect.';
      LedgEntryNotPostedErr@1041 : TextConst 'ENU=Production Journal  posting must create %1.';
      BinCodeMustHaveValueErr@1043 : TextConst 'ENU="The Bin does not exist. Identification fields and values: "';
      ProdOrderLineExistsErr@1045 : TextConst 'ENU=There is no Prod. Order Line within the filter.';
      FromProductionBinCodeErr@1046 : TextConst 'ENU=When creating PO from SO Bin Code should be taken from Location."From-Production Bin Code" filed';
      ProdOrderStatus@1047 : 'Simulated,Planned,Firm Planned,Released,Finished';
      OrderType@1039 : 'ItemOrder,ProjectOrder';
      WrongFieldValueErr@1048 : TextConst 'ENU=%1 in %2 must be copied from %3';
      ItemTrackingMode@1068 : ' ,Assign Lot No.,Select Entries,Verify Entries,Set Lot No.,Set Quantity & Lot No.';
      PostingQst@1067 : TextConst 'ENU=Do you want to post the journal lines?';
      JournalPostedMsg@1069 : TextConst 'ENU=successfully posted';
      WillNotAffectExistingEntriesTxt@1090 : TextConst 'ENU=The change will not affect existing entries.';
      RoutingHeaderExistErr@1053 : TextConst 'ENU=Routing No. must have a value in Prod. Order Routing Line';
      ItemMustNotBeShownErr@1051 : TextConst '@@@="%1 = item no.";ENU=Only filtered item must be displayed in the page.';

    [Test]
    [HandlerFunctions(ProdOrderCreatedMessageHandler)]
    PROCEDURE ProductrionOrderFromSalesOrderWithEmptyBinCodeCheck@216();
    VAR
      SalesLine@1004 : Record 37;
      CreateProdOrderFromSale@1001 : Codeunit 99000792;
    BEGIN
      // [FEATURE] [Production Order]
      // [SCENARIO 360749.1] Location's "From-Production Bin Code" copied to Prod. Order Line "Bin Code" when Sales Line has empty Bin Code.

      Initialize;

      // [GIVEN] Create Sales Order on White Location for Item with Replenishment System = Prod. Order without Bin
      CreateSalesOrderWithLocation(SalesLine,LocationWhite.Code,'');

      // [WHEN] Create Prod. Order from Sales Order Planning with Order Type = Project Order
      CreateProdOrderFromSale.CreateProdOrder(SalesLine,ProdOrderStatus::Released,OrderType::ProjectOrder);

      // [THEN] Prod. Order Line has correct Bin Code from Sales Line's Location
      VerifyProdOrderLineBinCode(LocationWhite."From-Production Bin Code",SalesLine);
    END;

    [Test]
    [HandlerFunctions(ProdOrderCreatedMessageHandler)]
    PROCEDURE ProductrionOrderFromSalesOrderWithBinCodeCheck@215();
    VAR
      SalesLine@1004 : Record 37;
      CreateProdOrderFromSale@1001 : Codeunit 99000792;
      BinCode@1000 : Code[20];
    BEGIN
      // [FEATURE] [Production Order]
      // [SCENARIO 360749.2] "Bin Code" is copied to Prod. Order Line from location's "From-Production Bin Code" if both "From-Production Bin Code" and "Location Code" in Sales Line have values.

      Initialize;

      // [GIVEN] Create Sales Order on White Location for Item with Replenishment System = Prod. Order with Bin
      BinCode := LibraryUtility.GenerateGUID;
      CreateSalesOrderWithLocation(SalesLine,LocationWhite.Code,BinCode);

      // [WHEN] Create Prod. Order from Sales Order Planning with Order Type = Project Order
      CreateProdOrderFromSale.CreateProdOrder(SalesLine,ProdOrderStatus::Released,OrderType::ProjectOrder);

      // [THEN] Prod. Order Line has correct Bin Code from Location "From-Production Bin Code"
      VerifyProdOrderLineBinCode(LocationWhite."From-Production Bin Code",SalesLine);
    END;

    [Test]
    [HandlerFunctions(ProdOrderCreatedMessageHandler)]
    PROCEDURE RFH360420_CheckStockkeepingUnitReplenishmentSystemPriority2@204();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1004 : Record 37;
      Item@1000 : Record 27;
      CreateProdOrderFromSale@1001 : Codeunit 99000792;
    BEGIN
      // [FEATURE] [Production Order]
      // [SCENARIO 360420.1] Creating Orders from Sales with Order Type = "Project Order" fails if item has Replenishment System = "Purchase".

      Initialize;

      // [GIVEN] Create Item with Replenishment System = "Purchase".
      CreateItem(Item,Item."Replenishment System"::Purchase);

      // [GIVEN] Create Sales Order
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));

      // [WHEN] Create Prod. Order from Sales Order Planning with Order Type = Project Order
      CreateProdOrderFromSale.CreateProdOrder(SalesLine,ProdOrderStatus::Released,OrderType::ProjectOrder);

      // [THEN] Verify Prod. Order Line does not exists
      VerifyProdOrderLineDoesNotExist(SalesLine);
    END;

    [Test]
    [HandlerFunctions(ProdOrderCreatedMessageHandler)]
    PROCEDURE RFH360420_CheckStockkeepingUnitReplenishmentSystemPriority@202();
    VAR
      SalesLine@1003 : Record 37;
      CreateProdOrderFromSale@1001 : Codeunit 99000792;
    BEGIN
      // [FEATURE] [Production Order]
      // [SCENARIO 360420.2] Creating Orders from Sales with Order Type = "Project Order" is ignoring Replenishment System from the higher prioritized Stockkeeping Unit Card Information.
      Initialize;

      // [GIVEN] Create Item with Replenishment System = "Purchase" and SKU - "Prod. Order". Create Sales Order
      CreateItemWithSKU(SalesLine);

      // [WHEN] Create Prod. Order from Sales Order Planning with Order Type = Project Order
      CreateProdOrderFromSale.CreateProdOrder(SalesLine,ProdOrderStatus::Released,OrderType::ProjectOrder);

      // [THEN] Verify Prod. Order Line is calculated correctly
      VerifyProdOrderLineFromSalesLine(SalesLine);
    END;

    [Test]
    [HandlerFunctions(LotItemTrackingPageHandler,ConfirmQstHandlerTRUE)]
    PROCEDURE ItemTrackingOnRequisitionLineForProductionOrderComponent@4();
    VAR
      Item@1000 : Record 27;
      ItemTrackingCode@1001 : Record 6502;
      Item2@1002 : Record 27;
      ProductionBOMHeader@1004 : Record 99000771;
      ProductionOrder@1009 : Record 5405;
      ReservationEntry@1016 : Record 337;
      ProdOrderComponent@1003 : Record 5407;
      Quantity@1005 : Decimal;
    BEGIN
      // Setup: Create Production Item with Lot Specific Tracking and Production BOM. Create Release Production Order and Assign Tracking on Production Order Component line.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateTrackedItem(
        Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::"Fixed Reorder Qty.",FALSE,Quantity,
        ItemTrackingCode.Code);
      CreateTrackedItem(
        Item2,Item2."Replenishment System"::"Prod. Order",Item."Reordering Policy"::"Fixed Reorder Qty.",FALSE,Quantity,
        ItemTrackingCode.Code);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item."No.",Item2."Base Unit of Measure");
      UpdateProductionBOMOnItem(Item2,ProductionBOMHeader."No.");

      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item2."No.",Quantity);
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",Item."No.");
      AssingTrackingOnProdOrderComponent(ProdOrderComponent);

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Verify: Verify Item Tracking on Requisition line.
      FindReservationEntry(ReservationEntry,Item."No.",DATABASE::"Prod. Order Component");
      VerifyTrackingOnRequisitionLine(Item."No.",ReservationEntry."Lot No.",ProdOrderComponent."Expected Quantity");  // verify on Page handler - LotItemTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(LotItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ItemTrackingOnRequisitionLineForSalesOrder@14();
    VAR
      Item@1000 : Record 27;
      ItemTrackingCode@1001 : Record 6502;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      ReservationEntry@1016 : Record 337;
      ItemTrackingMode@1002 : ' ,Assign Lot No.,Select Entries,Verify Entries';
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Item with Lot Specific Tracking and update inventory. Create Sales Order with Tracking.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateTrackedItem(
        Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::"Fixed Reorder Qty.",FALSE,Quantity,
        ItemTrackingCode.Code);
      CreateAndPostItemJournalLineWithTracking(Item."No.",Quantity);

      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue for Page Handler - LotItemTrackingPageHandler.
      SalesLine.OpenItemTrackingLines;  // Select Item Tracking on Page handler - LotItemTrackingPageHandler.

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Verify: Verify Item Tracking on Requisition line.
      FindReservationEntry(ReservationEntry,Item."No.",DATABASE::"Sales Line");
      VerifyTrackingOnRequisitionLine(Item."No.",ReservationEntry."Lot No.",SalesLine.Quantity);  // verify on Page handler - LotItemTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(LotItemTrackingPageHandler)]
    PROCEDURE ItemTrackingOnPurchaseLineWithCalcRegenPlanTwice@27();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      Item3@1006 : Record 27;
      PurchaseLine@1007 : Record 39;
      ItemTrackingCode@1008 : Record 6502;
      ReservationEntry@1009 : Record 337;
      ItemTrackingMode@1005 : ' ,Assign Lot No.,Select Entries,Verify Entries';
    BEGIN
      // Setup: Create Production Item with Lot Specific Tracking and Production BOM. Create Sales Order using Parent Item.
      Initialize;
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateTrackedItem(
        Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::"Lot-for-Lot",TRUE,0,ItemTrackingCode.Code);
      CreateTrackedItem(
        Item2,Item2."Replenishment System"::"Prod. Order",Item2."Reordering Policy"::"Lot-for-Lot",TRUE,0,ItemTrackingCode.Code);

      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item."No.",Item2."Base Unit of Measure");
      UpdateProductionBOMOnItem(Item2,ProductionBOMHeader."No.");
      CreateSalesOrder(SalesHeader,SalesLine,Item2."No.",LibraryRandom.RandDec(10,2));

      // Calculate Regenerative Plan and Carry out action message.
      Item3.SETFILTER("No.",'%1|%2',Item."No.",Item2."No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item3,WORKDATE,WORKDATE);
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.");
      FindPurchaseLine(PurchaseLine,Item."No.");

      // Assign Item Tracking on Purchase Line.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue for Page Handler - LotItemTrackingPageHandler.
      PurchaseLine.OpenItemTrackingLines;  // Assign Item Tracking on Page handler - LotItemTrackingPageHandler.
      FindReservationEntry(ReservationEntry,Item."No.",DATABASE::"Purchase Line");

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item3,WORKDATE,WORKDATE);

      // Verify: Verify Item Tracking line on Purchase Line.
      // Enqueue for Page Handler - LotItemTrackingPageHandler.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Verify Entries");
      LibraryVariableStorage.Enqueue(ReservationEntry."Lot No.");
      LibraryVariableStorage.Enqueue(PurchaseLine.Quantity);
      PurchaseLine.OpenItemTrackingLines;  // verify on Page handler - LotItemTrackingPageHandler.
    END;

    [Test]
    PROCEDURE WorkCenterWithDimension@8();
    VAR
      WorkCenter@1000 : Record 99000754;
      DimensionValue@1001 : Record 349;
      DefaultDimension@1002 : Record 352;
    BEGIN
      // Setup: Create Work Center.
      Initialize;
      CreateWorkCenter(WorkCenter,080000T,160000T);

      // Exercise: Update Global Dimension 1 Code on Work Center.
      UpdateGlobalDimensionOnWorkCenter(DimensionValue,WorkCenter);

      // Verify: Verify Dimension for Work Center on Default Dimension.
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::"Work Center",WorkCenter."No.");
      DefaultDimension.TESTFIELD("Dimension Code",DimensionValue."Dimension Code");
      DefaultDimension.TESTFIELD("Dimension Value Code",DimensionValue.Code);
    END;

    [Test]
    PROCEDURE SimulatedProductionOrderWithDimension@34();
    VAR
      DimensionValue@1001 : Record 349;
      Item@1004 : Record 27;
      Item2@1005 : Record 27;
      DimensionValue2@1006 : Record 349;
      ProductionOrder@1010 : Record 5405;
    BEGIN
      // Setup: Create Production Item with dimension.
      Initialize;
      CreateProductionItemWithDimensionSetup(Item,Item2,DimensionValue,DimensionValue2);

      // Exercise: Create and Refresh Simulated Production Order.
      CreateAndRefreshSimulatedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));

      // Verify: Verify Dimension on Production Order Line and Production Order Component.
      VerifyDimensionOnProductionOrderLine(ProductionOrder.Status,ProductionOrder."No.",DimensionValue);
      VerifyDimensionOnProdOrderComponent(ProductionOrder.Status,ProductionOrder."No.",Item2."No.",DimensionValue); // TFS 322868 and 322869
    END;

    [Test]
    PROCEDURE SimulatedProdOrderWithNewDimensionOnProdLineAndChangeStatusToReleased@119();
    BEGIN
      // [FEATURE] [Dimension] [Production Order]
      // [SCENARIO] Verify dimension in Production Order, having parent and child items with their own dim values, and order line with different dim value, after releasing Production Order.

      // Setup.
      Initialize;
      SimulatedProdOrderWithNewDimensionAndChangeStatusToReleased(TRUE);  // Dimension Update On Production Order Line as True.
    END;

    [Test]
    PROCEDURE SimulatedProdOrderWithNewDimensionOnComponentLineAndChangeStatusToReleased@24();
    BEGIN
      // [FEATURE] [Dimension] [Production Order]
      // [SCENARIO] Verify dimension in Production Order, having parent and child items with their own dim values, and component line with different dim value, after releasing Production Order.

      // Setup.
      Initialize;
      SimulatedProdOrderWithNewDimensionAndChangeStatusToReleased(FALSE);  // Dimension Update On Production Order Line as False.
    END;

    LOCAL PROCEDURE SimulatedProdOrderWithNewDimensionAndChangeStatusToReleased@68(DimensionUpdateOnProductionOrderLine@1000 : Boolean);
    VAR
      DimensionValue@1001 : Record 349;
      Item@1004 : Record 27;
      Item2@1005 : Record 27;
      DimensionValue2@1006 : Record 349;
      DimensionValue3@1009 : Record 349;
      ProductionOrder@1010 : Record 5405;
      ProductionOrderNo@1013 : Code[20];
    BEGIN
      // Create Production Item with dimension and update dimension on Production Order Line and Production Order Component.
      CreateProductionItemWithDimensionSetup(Item,Item2,DimensionValue,DimensionValue2);
      CreateAndRefreshSimulatedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));

      IF DimensionUpdateOnProductionOrderLine THEN
        UpdateDimensionOnProductionOrderLine(DimensionValue3,ProductionOrder)
      ELSE
        UpdateDimensionOnProdOrderComponent(DimensionValue3,ProductionOrder,Item2."No.");

      // Exercise: Change Status of the Production Order - Simulated to Released.
      ProductionOrderNo := LibraryManufacturing.ChangeStatusSimulatedToReleased(ProductionOrder."No.");

      // Verify: Verify Dimension on Production Order Line and Production Order Component.
      VerifyDimensionOnProductionOrderLine(ProductionOrder.Status::Released,ProductionOrderNo,DimensionValue);
      VerifyDimensionOnProdOrderComponent(ProductionOrder.Status::Released,ProductionOrderNo,Item2."No.",DimensionValue); // TFS 322868 and 322869

      IF DimensionUpdateOnProductionOrderLine THEN
        VerifyDimensionOnProductionOrderLine(ProductionOrder.Status::Released,ProductionOrderNo,DimensionValue3)
      ELSE
        VerifyDimensionOnProdOrderComponent(ProductionOrder.Status::Released,ProductionOrderNo,Item2."No.",DimensionValue3);
    END;

    [Test]
    PROCEDURE ReleasedProdOrderWithNewDimensionOnComponentLineAndConsumptionJournal@41();
    BEGIN
      // Setup.
      Initialize;
      ReleasedProdOrderAndConsumptionJournalWithDimension(FALSE);  // Posting Consumption as False.
    END;

    [Test]
    PROCEDURE ReleasedProdOrderWithNewDimensionOnComponentLineAndPostConsumptionJournal@45();
    BEGIN
      // Setup.
      Initialize;
      ReleasedProdOrderAndConsumptionJournalWithDimension(TRUE);  // Posting Consumption as True.
    END;

    LOCAL PROCEDURE ReleasedProdOrderAndConsumptionJournalWithDimension@108(PostConsumption@1000 : Boolean);
    VAR
      DimensionValue@1001 : Record 349;
      Item@1004 : Record 27;
      Item2@1005 : Record 27;
      DimensionValue2@1006 : Record 349;
      DimensionValue3@1009 : Record 349;
      ProductionOrder@1010 : Record 5405;
    BEGIN
      // Create Production Item with dimension and update dimension on Production Order Component.
      CreateProductionItemWithDimensionSetup(Item,Item2,DimensionValue,DimensionValue2);
      CreateAndPostItemJournalLine(Item2."No.");
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));
      UpdateDimensionOnProdOrderComponent(DimensionValue3,ProductionOrder,Item2."No.");

      // Exercise: Create Consumption Journal and Post.
      CreateConsumptionJournal(ProductionOrder."No.");
      IF PostConsumption THEN
        LibraryInventory.PostItemJournalLine(ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);

      // Verify: Verify Dimension on Item Journal Line. Verify Dimension on Item Ledger Entry and Value Entry.
      IF PostConsumption THEN BEGIN
        VerifyDimensionsOnItemLedgerEntry(ProductionOrder."No.",Item2."No.",DimensionValue,DimensionValue3); // TFS 322868 and 322869
        VerifyDimensionsOnValueEntry(ProductionOrder."No.",Item2."No.",DimensionValue,DimensionValue3); // TFS 322868 and 322869
      END ELSE
        VerifyDimensionsOnItemJournalLine(Item2."No.",DimensionValue,DimensionValue3); // TFS 322868 and 322869
    END;

    [Test]
    PROCEDURE ProductionForecastWithPeriodTypeDay@13();
    VAR
      PeriodType@1014 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      ProductionForecastWithPeriodType(PeriodType::Day);
    END;

    [Test]
    PROCEDURE ProductionForecastWithPeriodTypeWeek@48();
    VAR
      PeriodType@1014 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      ProductionForecastWithPeriodType(PeriodType::Week);
    END;

    [Test]
    PROCEDURE ProductionForecastWithPeriodTypeMonth@52();
    VAR
      PeriodType@1014 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      ProductionForecastWithPeriodType(PeriodType::Month);
    END;

    [Test]
    PROCEDURE ProductionForecastWithPeriodTypeQuarter@51();
    VAR
      PeriodType@1014 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      ProductionForecastWithPeriodType(PeriodType::Quarter);
    END;

    [Test]
    PROCEDURE ProductionForecastWithPeriodTypeYear@57();
    VAR
      PeriodType@1014 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      ProductionForecastWithPeriodType(PeriodType::Year);
    END;

    [Test]
    PROCEDURE ProductionForecastWithPeriodTypeAccountingPeriod@55();
    VAR
      PeriodType@1010 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      ProductionForecastWithPeriodType(PeriodType::"Accounting Period");
    END;

    LOCAL PROCEDURE ProductionForecastWithPeriodType@70(PeriodType@1010 : Option);
    VAR
      ProductionForecastName@1000 : Record 99000851;
      MatrixRecords@1015 : ARRAY [32] OF Record 2000000007;
      MatrixManagement@1002 : Codeunit 9200;
      ProductionForecast@1001 : TestPage 99000919;
      MatrixColumnCaptions@1007 : ARRAY [32] OF Text[200];
      ColumnSet@1006 : Text[100];
      SetPosition@1005 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';
      PrimaryKeyFirstRecordInCurrentSet@1004 : Text[100];
      CurrentSetLength@1003 : Integer;
    BEGIN
      // Create Production Forecast name. Using Matrix Management to Generate Period Matrix Data.
      LibraryManufacturing.CreateProductionForecastName(ProductionForecastName);
      MatrixManagement.GeneratePeriodMatrixData(
        SetPosition,ARRAYLEN(MatrixRecords),FALSE,PeriodType,'',PrimaryKeyFirstRecordInCurrentSet,MatrixColumnCaptions,ColumnSet,
        CurrentSetLength,MatrixRecords);

      // Open Production Forecast Page.
      ProductionForecast.OPENEDIT;
      ProductionForecast.ProductionForecastName.SETVALUE(ProductionForecastName.Name);

      // Exercise: Set Period Type on Production Forecast Page. Using Page Testability for Matrix Page.
      ProductionForecast.PeriodType.SETVALUE(PeriodType);

      // Verify: Verify Column Captions on Production Forecast Matrix Page.
      Assert.AreEqual(MatrixColumnCaptions[1],ProductionForecast.Matrix.Field1.CAPTION,CaptionErr);
      Assert.AreEqual(MatrixColumnCaptions[2],ProductionForecast.Matrix.Field2.CAPTION,CaptionErr);
    END;

    [Test]
    [HandlerFunctions(OrderPlanningPageHandler)]
    PROCEDURE OrderPlanningForReleasedProductionOrder@29();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1002 : Record 5405;
      RequisitionLine@1004 : Record 246;
      ReleasedProductionOrder@1006 : TestPage 99000831;
    BEGIN
      // Setup. Create Items, Production BOM, Released Production Order and Calculate Order Plan. Create Released Production Order.
      Initialize;
      CreateProductionItemSetup(Item);
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Create and Open Released Production Order Page. Page required for verification.
      CreateAndOpenReleasedProductionOrder(ReleasedProductionOrder,Item."No.");
      LibraryVariableStorage.Enqueue(ReleasedProductionOrder."No.".VALUE);  // Enqueue value for Page Handler - OrderPlanningPageHandler.

      // Exercise and Verify: Calculate Order Plan from Released Production Order Page. Verify Value on Page Handler - OrderPlanningPageHandler.
      // After Calculating Order Planning, Cursor points to selected Production Order Line.
      ReleasedProductionOrder.Planning.INVOKE;
    END;

    [Test]
    [HandlerFunctions(ReservationDetailPageHandler)]
    PROCEDURE ReservationFromSalesOrderUsingProductionOrderWithDifferentVariantCode@46();
    BEGIN
      // Setup.
      Initialize;
      ReservationFromSalesOrderUsingProductionOrderWithVariantCode(FALSE);  // Same Variant Code On Sales And Production as False.
    END;

    [Test]
    [HandlerFunctions(ReservationDetailPageHandler)]
    PROCEDURE ReservationFromSalesOrderUsingProductionOrderWithSameVariantCode@44();
    BEGIN
      // Setup.
      Initialize;
      ReservationFromSalesOrderUsingProductionOrderWithVariantCode(TRUE);  // Same Variant Code On Sales And Production as True.
    END;

    LOCAL PROCEDURE ReservationFromSalesOrderUsingProductionOrderWithVariantCode@96(SameVariantCodeOnSalesAndProduction@1010 : Boolean);
    VAR
      Item@1000 : Record 27;
      ItemVariant@1003 : Record 5401;
      ItemVariant2@1004 : Record 5401;
      ProductionOrder@1005 : Record 5405;
      SalesHeader@1007 : Record 36;
      SalesLine@1008 : Record 37;
    BEGIN
      // Create Production Item and Item Variant. Create Released Production Order with Variant Code.
      CreateProductionItemSetup(Item);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      LibraryInventory.CreateItemVariant(ItemVariant2,Item."No.");

      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));
      UpdateVariantCodeOnProdOrderLine(ProductionOrder,ItemVariant.Code);

      // Create Sales Order with Variant Code.
      IF SameVariantCodeOnSalesAndProduction THEN
        CreateSalesOrderWithVariantCode(SalesHeader,SalesLine,Item."No.",ItemVariant.Code,ProductionOrder.Quantity)
      ELSE
        CreateSalesOrderWithVariantCode(SalesHeader,SalesLine,Item."No.",ItemVariant2.Code,ProductionOrder.Quantity);

      // Exercise and Verify: Open Reservation form Sales Order. Verify Reservation Quantities through Page Handler - ReservationDetailPageHandler.
      IF SameVariantCodeOnSalesAndProduction THEN
        ReservationFromSalesOrder(SalesLine,ProductionOrder.Quantity,0) // Total Reserved Quantity as Zero.
      ELSE
        ReservationFromSalesOrder(SalesLine,0,0);  // Total Quantity and Total Reserved Quantity as Zero.
    END;

    [Test]
    [HandlerFunctions(ReservationDetailPageHandler)]
    PROCEDURE ReservationFromMultipleSalesOrderUsingProductionOrder@36();
    VAR
      Item@1000 : Record 27;
      ItemVariant@1003 : Record 5401;
      ProductionOrder@1005 : Record 5405;
      SalesHeader@1007 : Record 36;
      SalesLine@1008 : Record 37;
      SalesHeader2@1011 : Record 36;
      SalesLine2@1010 : Record 37;
    BEGIN
      // Setup: Create Production Item and Item Variant. Create Released Production Order with Variant Code.
      Initialize;
      CreateProductionItemSetup(Item);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");

      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2) + 10);  // Large Random Value required.
      UpdateVariantCodeOnProdOrderLine(ProductionOrder,ItemVariant.Code);

      // Create Sales Order with Variant Code and Reserve Quantity.
      CreateSalesOrderWithVariantCode(SalesHeader,SalesLine,Item."No.",ItemVariant.Code,ProductionOrder.Quantity / 2);  // Partial Quantity.
      LibraryVariableStorage.Enqueue(TRUE);  // Enqueue value for Page Handler - ReservationDetailPageHandler.
      SalesLine.ShowReservation;  // Open Reservation Page through Page Handler - ReservationDetailPageHandler.

      // Create Sales Order with Variant Code.
      CreateSalesOrderWithVariantCode(SalesHeader2,SalesLine2,Item."No.",ItemVariant.Code,ProductionOrder.Quantity / 2);  // Partial Quantity.

      // Exercise and Verify: Open Reservation form Sales Order. Verify Reservation Quantities through Page Handler - ReservationDetailPageHandler.
      ReservationFromSalesOrder(SalesLine2,ProductionOrder.Quantity,SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE ReservationFromSalesOrderUsingPurchaseOrderPosting@35();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchaseHeader2@1004 : Record 38;
      PurchaseLine2@1003 : Record 39;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
    BEGIN
      // Setup: Create Item. Create and Post Purchase Order and create Purchase Order again.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateAndPostPurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.",LibraryRandom.RandDec(10,2));
      CreatePurchaseOrder(PurchaseHeader2,PurchaseLine2,Item."No.",LibraryRandom.RandDec(10,2));

      // Create Sales Order.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",PurchaseLine.Quantity + PurchaseLine2.Quantity);
      UpdateShipmentDateOnSalesLine(SalesLine);

      // Exercise and Verify: Open Reservation form Sales Order. Verify Reservation Quantities through Page Handler - ReservationPageHandler.
      ReservationFromSalesOrderCurrentLine(SalesLine,PurchaseLine.Quantity,PurchaseLine2.Quantity);  // Verify on Page Handler - ReservationPageHandler.
    END;

    [Test]
    [HandlerFunctions(SalesOrderPlanningPageHandler)]
    PROCEDURE SalesOrderPlanningWithTrackedItem@87();
    VAR
      SalesLine@1006 : Record 37;
    BEGIN
      // Setup: Create Item Tracking Code for SN Specific Tracking. Create Item and Sales Order.
      Initialize;
      CreateSalesOrderWithTrackedItemSetup(SalesLine);

      // Exercise and Verify: Open Sales Order Planning Page. Verify line on Page Handler SalesOrderPlanningPageHandler.
      LibraryVariableStorage.Enqueue(SalesLine."No.");  // Enqueue value for Verifying Item No on Planning Page.
      LibraryVariableStorage.Enqueue(-SalesLine.Quantity);  // Enqueue value for Verifying Available on Planning Page.
      OpenSalesOrderPlanning(SalesLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(CreateOrderFromSalesModalPageHandler,MessageHandler)]
    PROCEDURE FirmPlannedProductionOrderFromSalesOrderPlanningWithTrackedItem@168();
    VAR
      SalesLine@1006 : Record 37;
      ProductionOrder@1008 : Record 5405;
    BEGIN
      // Setup: Create Item Tracking Code for SN Specific Tracking. Create Item and Sales Order.
      Initialize;
      CreateSalesOrderWithTrackedItemSetup(SalesLine);
      LibraryVariableStorage.Enqueue(FirmPlannedProdOrderCreatedTxt);  // Enqueue value for Message Handler.

      // Exercise: Create Firm Planned Production Order using Sales Order Planning.
      LibraryPlanning.CreateProdOrderUsingPlanning(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",SalesLine."Document No.",SalesLine."No.");

      // Verify: Verify Created new Firm Planned Production Order.
      VerifyProductionOrderLine(ProductionOrder.Status,ProductionOrder."No.",SalesLine."No.",SalesLine.Quantity,'');
    END;

    [Test]
    [HandlerFunctions(CreateOrderFromSalesModalPageHandler,MessageHandler,SerialItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE SerialNoTrackingOnProductionLineWithCalcRegenPlan@107();
    VAR
      Item@1001 : Record 27;
      SalesLine@1006 : Record 37;
      ProductionOrder@1008 : Record 5405;
      ProdOrderLine@1007 : Record 5406;
    BEGIN
      // Setup: Create Item Tracking Code for SN Specific Tracking. Create Item and Sales Order.
      Initialize;
      CreateSalesOrderWithTrackedItemSetup(SalesLine);

      // Create Firm Planned Production Order using Sales Order Planning and assign Tracking on Production Order Line.
      LibraryVariableStorage.Enqueue(FirmPlannedProdOrderCreatedTxt);  // Enqueue value for Message Handler.
      LibraryPlanning.CreateProdOrderUsingPlanning(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",SalesLine."Document No.",SalesLine."No.");
      AssignTrackingOnProdOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
      Item.GET(SalesLine."No.");

      // Exercise. Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Verify: Verify Tracking line on Production Order Line on Page Handler.
      ProdOrderLine.GET(ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",ProdOrderLine."Line No.");
      LibraryVariableStorage.Enqueue(FALSE);  // Enqueue value AssignSerialNo as False for Page Handler - SerialItemTrackingPageHandler.
      LibraryVariableStorage.Enqueue(ProdOrderLine.Quantity);  // Enqueue value for Count the number of Tracking line in Tracking page in case of Serial Tracking for Page Handler.
      ProdOrderLine.OpenItemTrackingLines;  // Open Page Handler- SerialItemTrackingPageHandler for Verifying Tracking line.
    END;

    [Test]
    [HandlerFunctions(LotItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE FlushingMethodForwardWithLotNoChangeProductionStatusToReleasedError@116();
    BEGIN
      // [FEATURE] [Item Tracking] [Production Order]
      // [SCENARIO] Verify an error on release Production Order with Lot Tracked component Item, assigned Lot No in Prod Order, but insufficient Quantity in Tracking.

      // Setup.
      Initialize;
      FlushingMethodForwardWithLotNoTracking(TRUE);  // Tracking on Production Order Component as True.
    END;

    [Test]
    [HandlerFunctions(LotItemTrackingPageHandler)]
    PROCEDURE FlushingMethodForwardWithoutTrackingOnProdOrderComponentLotNoError@99();
    BEGIN
      // [FEATURE] [Item Tracking] [Production Order]
      // [SCENARIO] Verify an error on release Production Order with Lot Tracked component Item, but not assigned Lot No in Prod Order.

      // Setup.
      Initialize;
      FlushingMethodForwardWithLotNoTracking(FALSE);  // Tracking on Production Order Component as False.
    END;

    LOCAL PROCEDURE FlushingMethodForwardWithLotNoTracking@86(TrackingOnProductionOrderComponent@1005 : Boolean);
    VAR
      Item@1004 : Record 27;
      ItemTrackingCode@1003 : Record 6502;
      Item2@1002 : Record 27;
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Create Item Tracking Code for Lot Specific and create Items. Create Production BOM.
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',ItemTrackingCode.Code);
      UpdateFlushingMethodOnItem(Item,Item."Flushing Method"::Forward);

      CreateItem(Item2,Item2."Replenishment System"::"Prod. Order");
      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item."No.",Item2."Base Unit of Measure");
      UpdateProductionBOMOnItem(Item2,ProductionBOMHeader."No.");

      // Update Item Inventory using Tracking.
      CreateAndPostItemJournalLineWithTracking(Item."No.",LibraryRandom.RandDec(10,2));

      // Create Firm Planned Production Order.
      CreateAndRefreshFirmPlannedProductionOrder(ProductionOrder,Item2."No.",LibraryRandom.RandDec(10,2) + 10);  // Using large random value more than inventory of the Child item.

      IF TrackingOnProductionOrderComponent THEN
        TrackingOnProdOrderComponent(ProductionOrder,Item."No.");  // Add Tracking on Production Order Component line.

      // Exercise: Change Production Order Status Firm Planned to Released.
      ASSERTERROR LibraryManufacturing.ChangeStatusFirmPlanToReleased(
          ProductionOrder."No.",ProductionOrder.Status,ProductionOrder.Status::Released);

      // Verify: Verify error message when Change Production Order Status.
      IF TrackingOnProductionOrderComponent THEN
        Assert.ExpectedError(QtyToHandleErr) // Assign tracking is less then Production Order Component Quantity.
      ELSE
        Assert.ExpectedError(STRSUBSTNO(LotNoErr,Item."No."));  // Tracking is not assigned on Production Order Component.
    END;

    [Test]
    PROCEDURE ProductionBOMNotCertifiedAndRefreshReleasedProdOrderError@15();
    VAR
      Item@1000 : Record 27;
      ChildItem@1001 : Record 27;
      ProductionOrder@1004 : Record 5405;
    BEGIN
      // Setup: Create Production Item.
      Initialize;
      ChildItem.GET(CreateProductionItemSetup(Item));

      // Create Child Production BOM with Status New and attached to Parent Production BOM and Recertify Parent BOM.
      UpdateProductionBOMAndRecertify(Item."Production BOM No.",Item."Base Unit of Measure",ChildItem."No.");

      // Exercise: Create and Refresh Released Production Order.
      ASSERTERROR CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));

      // Verify: Verify Production BOM Status error message when Refresh Production Order.
      Assert.ExpectedError(ProductionBOMCertifiedStatusErr);
    END;

    [Test]
    [HandlerFunctions(ConfirmQstHandlerTRUE)]
    PROCEDURE ConsumptionPostingForFinishedProdOrderError@25();
    VAR
      Item@1000 : Record 27;
      ChildItem@1004 : Record 27;
      ProductionOrder@1006 : Record 5405;
      ItemJournalLine@1008 : Record 83;
    BEGIN
      // [FEATURE] [Production]
      // [SCENARIO] Verify an error on Post Consumption Journal after Production Order Status Changed to Finished.

      // Setup: Create Production Item and Post Item Journal. Create and Refresh Released Production Order.
      Initialize;
      ChildItem.GET(CreateProductionItemSetup(Item));
      CreateAndPostItemJournalLine(ChildItem."No.");
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));

      // Create Consumption Journal, Create and Post Output Journal.
      CreateConsumptionJournal(ProductionOrder."No.");
      CreateAndPostOutputJournal(ProductionOrder."No.");

      // Change Production Order Status Released to Finished.
      LibraryVariableStorage.Enqueue(ProductionOrderFinishedStatusMsg);  // Enqueue value for Message Handler.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      FindItemJournalLine(ItemJournalLine,ConsumptionItemJournalBatch."Journal Template Name",ConsumptionItemJournalBatch.Name);

      // Exercise: Post Consumption Journal after Production Order Status Changed to Finished.
      ASSERTERROR ItemJournalLine.PostingItemJnlFromProduction(FALSE);  // Print as FALSE.

      // Verify: Verify Error message when post Consumption for Finished Production Order.
      Assert.ExpectedError(ProductionOrderErr);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,CreateOrderFromSalesModalPageHandler)]
    PROCEDURE ProdOrderFromSalesOrderWithReplenishmentAsPurchaseOnSKUError@67();
    VAR
      Item@1005 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      ProductionOrder@1002 : Record 5405;
      StockkeepingUnit@1000 : Record 5700;
    BEGIN
      // Setup: Create Item and Stockkeeping Unit with Replenishment System as Purchase.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateStockkeepingUnit(LocationBlue.Code,Item."No.",StockkeepingUnit."Replenishment System"::Purchase);

      // Create Sales Order, Update Location Code on Sales Line.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));
      UpdateLocationCodeOnSalesLine(SalesLine,LocationBlue.Code);
      LibraryVariableStorage.Enqueue(NothingToPlanMsg);   // Enqueue value for Message Handler.

      // Exercise: Create Production Order from Sales Order.
      ASSERTERROR LibraryPlanning.CreateProdOrderUsingPlanning(
          ProductionOrder,ProductionOrder.Status::"Firm Planned",SalesLine."Document No.",SalesLine."No.");

      // Verify: Verify Error message when Replenishment System as Purchase on SKU.
      Assert.ExpectedError(ProductionOrderNotExistErr);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,CreateOrderFromSalesModalPageHandler)]
    PROCEDURE ProdOrderFromSalesOrderWithReplenishmentAsProdOrderOnSKU@98();
    VAR
      Item@1005 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      ProductionOrder@1002 : Record 5405;
      StockkeepingUnit@1000 : Record 5700;
    BEGIN
      // Setup: Create Item and Stockkeeping Unit with Replenishment System as Prod. Order.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateStockkeepingUnit(LocationBlue.Code,Item."No.",StockkeepingUnit."Replenishment System"::"Prod. Order");

      // Create Sales Order, Update Location Code on Sales Line.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));
      UpdateLocationCodeOnSalesLine(SalesLine,LocationBlue.Code);
      LibraryVariableStorage.Enqueue(FirmPlannedProdOrderCreatedTxt);  // Enqueue value for Message Handler.

      // Exercise: Create Production Order from Sales Order.
      LibraryPlanning.CreateProdOrderUsingPlanning(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",SalesLine."Document No.",SalesLine."No.");

      // Verify: Verify Production Order Line when Replenishment System as Prod. Order on SKU.
      VerifyProductionOrderLine(
        ProductionOrder.Status,ProductionOrder."No.",SalesLine."No.",SalesLine.Quantity,SalesLine."Location Code");
    END;

    [Test]
    PROCEDURE ProdBOMWhereUsedWithProdBOMVersionCertified@32();
    VAR
      ProductionBOMVersion@1000 : Record 99000779;
    BEGIN
      // Setup.
      Initialize;
      ProdBOMWhereUsedWithProdBOMVersion(ProductionBOMVersion.Status::Certified);
    END;

    [Test]
    PROCEDURE ProdBOMWhereUsedWithProdBOMVersionClosed@161();
    VAR
      ProductionBOMVersion@1000 : Record 99000779;
    BEGIN
      // Setup.
      Initialize;
      ProdBOMWhereUsedWithProdBOMVersion(ProductionBOMVersion.Status::Closed);
    END;

    LOCAL PROCEDURE ProdBOMWhereUsedWithProdBOMVersion@162(ProdBOMVersionStatus@1010 : Option);
    VAR
      ChildItem@1000 : Record 27;
      Item@1001 : Record 27;
      Item2@1002 : Record 27;
      ProductionBOMHeader@1004 : Record 99000771;
      ProdBOMWhereUsed@1008 : TestPage 99000811;
      ProductionBOMVersion@1003 : Code[20];
    BEGIN
      // Create Items and Item Hierarchy : Item -> ChildItem.
      ChildItem.GET(CreateProductionItemSetup(Item));
      CreateItem(Item2,Item2."Replenishment System"::"Prod. Order");

      // Create Production BOM and new Item Hierarchies : Item2 -> Item and Item2 -> ChildItem. Create Production BOM Version and Update Status on Prod. BOM Version.
      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item."No.",Item."Base Unit of Measure");
      UpdateProductionBOMOnItem(Item2,ProductionBOMHeader."No.");
      ProductionBOMVersion := CreateProductionBOMVersionAndUpdateStatus(ProductionBOMHeader,ChildItem."No.",ProdBOMVersionStatus);

      // Exercise: Open Production BOM Where Used Page.
      OpenProdBOMWhereUsedPage(ProdBOMWhereUsed,ChildItem);

      // Verify: Verify Nos of Lines, Version Code and Item No. on Production BOM Where Used Page.
      VerifyProdBOMWhereUsedPageVersion(ProdBOMWhereUsed,ProdBOMVersionStatus,Item2."No.",Item."No.",ProductionBOMVersion);
    END;

    [Test]
    PROCEDURE ProdBOMWhereUsedWithProdBOMCertified@169();
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      // Setup.
      Initialize;
      ProdBOMWhereUsedWithProdBOM(ProductionBOMHeader.Status::Certified);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTRUE)]
    PROCEDURE ProdBOMWhereUsedWithProdBOMClosed@167();
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      // Setup.
      Initialize;
      ProdBOMWhereUsedWithProdBOM(ProductionBOMHeader.Status::Closed);
    END;

    LOCAL PROCEDURE ProdBOMWhereUsedWithProdBOM@178(ProdBOMHeaderStatus@1010 : Option);
    VAR
      ChildItem@1000 : Record 27;
      Item@1001 : Record 27;
      ProdBOMWhereUsed@1008 : TestPage 99000811;
    BEGIN
      // Create Items and Item Hierarchy : Item -> ChildItem.
      ChildItem.GET(CreateProductionItemSetup(Item));
      UpdateProdBOMHeaderStatus(Item."Production BOM No.",ProdBOMHeaderStatus);

      // Exercise: Open Production BOM Where Used Page.
      OpenProdBOMWhereUsedPage(ProdBOMWhereUsed,ChildItem);

      // Verify: Verify Nos of Lines and Item No. on Production BOM Where Used Page.
      VerifyProdBOMWhereUsedPage(ProdBOMWhereUsed,ProdBOMHeaderStatus,Item."No.");
    END;

    [Test]
    PROCEDURE ProdBOMWhereUsedFilterByItemNo@94();
    VAR
      ChildItem@1000 : Record 27;
      ParentItem@1004 : ARRAY [2] OF Record 27;
      ProdBOMHeader@1001 : ARRAY [2] OF Record 99000771;
      ProdBOMLine@1002 : Record 99000772;
      ProdBOMWhereUsed@1003 : TestPage 99000811;
      I@1005 : Integer;
    BEGIN
      // [FEATURE] [Production BOM] [Where Used]
      // [SCENARIO] "Production - Where Used" can be filtered by item no.

      // [GIVEN] Create a component item "CI" and two production BOMs that use this item
      LibraryInventory.CreateItem(ChildItem);
      // [GIVEN] Create two manufactured items "PI1" and "PI2" and assign each a BOM
      FOR I := 1 TO 2 DO BEGIN
        CreateProductionBOM(ProdBOMHeader[I],ProdBOMLine,ChildItem."Base Unit of Measure",ProdBOMLine.Type::Item,ChildItem."No.");

        LibraryManufacturing.CreateItemManufacturing(
          ParentItem[I],ParentItem[I]."Costing Method"::Standard,0,ParentItem[I]."Reordering Policy"::" ",
          ParentItem[I]."Flushing Method"::Backward,'',ProdBOMHeader[I]."No.");
      END;

      // [GIVEN] Run "Production - Where Used" report for the component item
      OpenProdBOMWhereUsedPage(ProdBOMWhereUsed,ChildItem);

      // [WHEN] Set filter in the "Where Used" page: "Item No." = "PI1"
      ProdBOMWhereUsed.FILTER.SETFILTER("Item No.",ParentItem[1]."No.");

      // [THEN] Item "PI1" is displayed in the list, item "PI2" in not in the list
      ProdBOMWhereUsed.FIRST;
      ProdBOMWhereUsed."Item No.".ASSERTEQUALS(ParentItem[1]."No.");
      Assert.IsFalse(ProdBOMWhereUsed.NEXT,ItemMustNotBeShownErr);
    END;

    [Test]
    [HandlerFunctions(ProductionJournalPageHandler)]
    PROCEDURE ConsumptionQuantityOnProdJournalWithLocationBlue@69();
    BEGIN
      // Setup.
      Initialize;
      ConsumptionQuantityOnProdJournalWithLocation(LocationBlue.Code);
    END;

    [Test]
    [HandlerFunctions(ProductionJournalPageHandler)]
    PROCEDURE ConsumptionQuantityOnProdJournalWithLocationSilver@65();
    BEGIN
      // Setup.
      Initialize;
      ConsumptionQuantityOnProdJournalWithLocation(LocationSilver.Code);
    END;

    [Test]
    [HandlerFunctions(ProductionJournalPageHandler)]
    PROCEDURE ConsumptionQuantityOnProdJournalWithLocationWhite@100();
    BEGIN
      // Setup.
      Initialize;
      ConsumptionQuantityOnProdJournalWithLocation(LocationWhite.Code);
    END;

    [Test]
    [HandlerFunctions(ProductionJournalPageHandler)]
    PROCEDURE ConsumptionQuantityOnProdJournalWithLocationGreen@118();
    BEGIN
      // Setup.
      Initialize;
      ConsumptionQuantityOnProdJournalWithLocation(LocationGreen.Code);
    END;

    LOCAL PROCEDURE ConsumptionQuantityOnProdJournalWithLocation@130(LocationCode@1007 : Code[10]);
    VAR
      Item@1000 : Record 27;
      ChildItem@1003 : Record 27;
      ProductionOrder@1001 : Record 5405;
      ProdOrderLine@1004 : Record 5406;
      ProdOrderComponent@1005 : Record 5407;
      ProductionJournalMgt@1002 : Codeunit 5510;
    BEGIN
      // Create Production Item Setup. Create and Refresh Released Production Order with Location.
      ChildItem.GET(CreateProductionItemSetup(Item));
      CreateAndRefreshReleasedProductionOrderWithLocation(ProductionOrder,Item."No.",LocationCode);

      // Production Journal will contain values for Expected Quantity on Location Blue, Silver but will be Zero on Location White, Green.
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
      IF LocationCode IN [LocationBlue.Code,LocationSilver.Code] THEN BEGIN
        FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",ChildItem."No.");
        LibraryVariableStorage.Enqueue(ProdOrderComponent."Expected Quantity");  // Enqueue value of Quantity for ProductionJournalPageHandler Page Handler.
      END ELSE
        LibraryVariableStorage.Enqueue(0);  // Enqueue value of Quantity for ProductionJournalPageHandler Page Handler.

      // Exercise and Verify: Open Production Journal page from Production Order and Verify Consumption Quantity on Page Handler ProductionJournalPageHandler.
      ProductionJournalMgt.Handling(ProductionOrder,ProdOrderLine."Line No.");
    END;

    [Test]
    [HandlerFunctions(PostUpdatedProdJournalPageHandler,ConfirmHandlerTRUE,MessageHandler)]
    PROCEDURE PostZeroQtyProdJournalWithLocationSilverAndEmptyBinCode@185();
    VAR
      ValueEntry@1001 : Record 5802;
      SetupTime@1002 : Decimal;
      ProdOrderNo@1003 : Code[20];
    BEGIN
      Initialize;

      // Exercise: Create Released Production Order of Silver location and post Production Journal with zero Output Quantity and empty Bin Code.
      // It should not check the Bin Code although Silver is bin mandatory, because we do not post actual inventory item.
      SetupTime := LibraryRandom.RandInt(100);
      ProdOrderNo := CreateAndPostProdJournalWithLocation(CreateItemWithRouting,LocationSilver.Code,0,SetupTime);

      // Verify: Verify the Value Entry to assure Production Journal is successfully posted.
      FindValueEntry(ValueEntry,ValueEntry."Item Ledger Entry Type"::" ",ProdOrderNo,''); // Both Entry Type and Item No. are empty.
      Assert.AreEqual(SetupTime,ValueEntry."Valued Quantity",ValuedQtyErr);
    END;

    [Test]
    PROCEDURE ProdOrderComponentWithDiffRoutingLink@62();
    VAR
      Item@1002 : Record 27;
      ProductionOrder@1000 : Record 5405;
      RoutingLink@1010 : Record 99000777;
      RoutingLink2@1013 : Record 99000777;
      ChildItemNo@1001 : Code[20];
    BEGIN
      // Setup: Create Routing Links. Create Production Item setup with Routing and Production BOM using Routing Link Code.
      Initialize;
      LibraryManufacturing.CreateRoutingLink(RoutingLink);
      LibraryManufacturing.CreateRoutingLink(RoutingLink2);
      ChildItemNo := CreateProductionItemsSetupWithRoutingLinkCode(Item,RoutingLink.Code,RoutingLink2.Code);

      // Exercise.
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));

      // Verify: Verify Production Order Component for Routing Link Code.
      VerifyProdOrderComponent(ProductionOrder.Status,ProductionOrder."No.",ChildItemNo,RoutingLink.Code);
      VerifyProdOrderComponent(ProductionOrder.Status,ProductionOrder."No.",ChildItemNo,RoutingLink2.Code);
    END;

    [Test]
    PROCEDURE OutputJournalForWorkAndMachineCenter@122();
    VAR
      Item@1002 : Record 27;
      ProductionOrder@1000 : Record 5405;
      RoutingLink@1010 : Record 99000777;
      RoutingLink2@1013 : Record 99000777;
      ItemJournalLine@1014 : Record 83;
    BEGIN
      // Setup: Create Routing Links. Create Production Item setup with Routing and Production BOM using Routing Link Code.
      Initialize;
      LibraryManufacturing.CreateRoutingLink(RoutingLink);
      LibraryManufacturing.CreateRoutingLink(RoutingLink2);
      CreateProductionItemsSetupWithRoutingLinkCode(Item,RoutingLink.Code,RoutingLink2.Code);
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));

      // Exercise: Create Output Journal and Explode Routing.
      OutputJournalExplodeRouting(ProductionOrder."No.");

      // Verify: Verify Output Journal Line for Type Machine Center and Work Center.
      VerifyOutputJournalLine(ItemJournalLine.Type::"Machine Center",ProductionOrder.Quantity);
      VerifyOutputJournalLine(ItemJournalLine.Type::"Work Center",ProductionOrder.Quantity);
    END;

    [Test]
    PROCEDURE RemainingQuantityOnProdOrderComponentWithRoutingLink@123();
    VAR
      Item@1002 : Record 27;
      ProductionOrder@1000 : Record 5405;
      RoutingLink@1010 : Record 99000777;
      RoutingLink2@1013 : Record 99000777;
      ProdOrderComponent@1015 : Record 5407;
      ChildItemNo@1001 : Code[20];
    BEGIN
      // Setup: Create Routing Links. Create Production Item setup with Routing and Production BOM using Routing Link Code.
      Initialize;
      LibraryManufacturing.CreateRoutingLink(RoutingLink);
      LibraryManufacturing.CreateRoutingLink(RoutingLink2);
      ChildItemNo := CreateProductionItemsSetupWithRoutingLinkCode(Item,RoutingLink.Code,RoutingLink2.Code);

      // Update Inventory for Child item. Create and Refresh Released Production Order. Explode Routing and Delete line for Type as Machine Center.
      CreateAndPostItemJournalLine(ChildItemNo);
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));
      OutputJournalExplodeRouting(ProductionOrder."No.");
      DeleteItemJournalLineForTypeMachineCenter;

      // Exercise: Post Output Journal line.
      LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);

      // Verify: Verify Remaining Quantity on Production Order Component.
      VerifyProdOrderComponent(ProductionOrder.Status,ProductionOrder."No.",ChildItemNo,RoutingLink.Code);
      FindProdOrderComponentForRoutingLinkCode(
        ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",ChildItemNo,RoutingLink2.Code);
      ProdOrderComponent.TESTFIELD("Remaining Quantity",0);  // Value required because Output Journal line Posted for Work Center.
    END;

    [Test]
    [HandlerFunctions(LotItemTrackingPageHandler)]
    PROCEDURE PurchaseOrderWithTrackingUsingPurchaseUnitOfMeasure@79();
    VAR
      ItemTrackingCode@1006 : Record 6502;
      Item@1005 : Record 27;
      Item2@1004 : Record 27;
    BEGIN
      // Setup: Create Item Tracking Code with LOT Specific. Create Items and Unit of Measure Code.
      Initialize;
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateTrackedItem(Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::" ",FALSE,0,ItemTrackingCode.Code);  // Reorder Quantity as 0.
      CreateItem(Item2,Item2."Replenishment System"::"Prod. Order");
      CreateAndUpdatePurchUnitOfMeasureOnItem(Item);

      // Exercise: Create and Post Purchase Order with Tracking.
      CreateAndPostPurchaseOrderWithItemTracking(Item."No.");

      // Verify: Verify Unit of Measure on Item Ledger Entry.
      VerifyItemLedgerEntry(Item."No.",Item."Purch. Unit of Measure");
    END;

    [Test]
    [HandlerFunctions(LotItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE FirmPlannedProdOrderWithTrackingOnComponentAndChangeStatus@170();
    VAR
      ItemTrackingCode@1006 : Record 6502;
      Item@1005 : Record 27;
      Item2@1004 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionOrder@1001 : Record 5405;
      ProductionOrderNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Production Order] [Item Tracking]
      // [SCENARIO] Verify Status changed without error: Firm Planned to Released (with Tracking).

      // Setup: Create Item Tracking Code with LOT Specific. Create Items and Unit of Measure Code.
      Initialize;
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateTrackedItem(Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::" ",FALSE,0,ItemTrackingCode.Code);  // Reorder Quantity as 0.
      CreateItem(Item2,Item2."Replenishment System"::"Prod. Order");
      CreateAndUpdatePurchUnitOfMeasureOnItem(Item);

      // Create Production BOM and Update Unit of Measure Code on Production BOM Line. Create and Post Purchase Order and Create and Refresh Firm Planned Production with Tracking.
      CreateAndCertifyProductionBOMWithDiffUnitOfMeasureCode(
        ProductionBOMHeader,Item2."Base Unit of Measure",Item."No.",Item."Purch. Unit of Measure");
      UpdateProductionBOMOnItem(Item2,ProductionBOMHeader."No.");
      CreateAndPostPurchaseOrderWithItemTracking(Item."No.");
      CreateAndRefreshFirmPlannedProductionOrder(ProductionOrder,Item2."No.",LibraryRandom.RandDec(10,2));
      TrackingOnProdOrderComponent(ProductionOrder,Item."No.");

      // Exercise: Change Status Firm Planned to Released.
      ProductionOrderNo :=
        LibraryManufacturing.ChangeStatusFirmPlanToReleased(
          ProductionOrder."No.",ProductionOrder.Status,ProductionOrder.Status::Released);

      // Verify: Verify Status changed without error and verify Released Production Order.
      VerifyReleasedProductionOrder(ProductionOrderNo,Item2."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTRUE)]
    PROCEDURE ReleasedProdOrderWithDimChangeStatusToFinished@110();
    VAR
      DimensionValue@1001 : Record 349;
      Item@1004 : Record 27;
      ProductionOrder@1010 : Record 5405;
      DimValue1@1002 : Code[20];
      DimValue2@1003 : Code[20];
      DimSetID@1005 : Integer;
    BEGIN
      // [FEATURE] [Dimension] [Production Order]
      // [SCENARIO] Verify Dimension on Production Order lines after change status - Released to Finished, Production Order having production Item with dimension, and Dimension updated on Order.

      // VSTF 324547.
      Initialize;

      // Setup. Create Production Item with dimension and update shortcut dimensions on Production Order Header.
      CreateProductionItemSetup(Item);
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));

      DimValue1 := LibraryDimension.FindDifferentDimensionValue(LibraryERM.GetShortcutDimensionCode(1),
          ProductionOrder."Shortcut Dimension 1 Code");
      ProductionOrder.VALIDATE("Shortcut Dimension 1 Code",DimValue1);

      DimValue2 := LibraryDimension.FindDifferentDimensionValue(LibraryERM.GetShortcutDimensionCode(2),
          ProductionOrder."Shortcut Dimension 2 Code");
      ProductionOrder.VALIDATE("Shortcut Dimension 2 Code",DimValue2);
      ProductionOrder.MODIFY(TRUE);
      DimSetID := ProductionOrder."Dimension Set ID";

      // Exercise: Change Status of the Production Order - Released To Finished.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // Verify: Verify Dimension on Production Order Line and Header.
      ProductionOrder.GET(ProductionOrder.Status::Finished,ProductionOrder."No.");
      ProductionOrder.TESTFIELD("Shortcut Dimension 1 Code",DimValue1);
      ProductionOrder.TESTFIELD("Shortcut Dimension 2 Code",DimValue2);
      ProductionOrder.TESTFIELD("Dimension Set ID",DimSetID);

      DimensionValue.GET(LibraryERM.GetShortcutDimensionCode(1),DimValue1);
      VerifyDimensionOnProductionOrderLine(ProductionOrder.Status,ProductionOrder."No.",DimensionValue);
      DimensionValue.GET(LibraryERM.GetShortcutDimensionCode(2),DimValue2);
      VerifyDimensionOnProductionOrderLine(ProductionOrder.Status,ProductionOrder."No.",DimensionValue);
    END;

    [Test]
    PROCEDURE SimulatedProductionOrderChangeStatusToReleased@128();
    VAR
      Item@1002 : Record 27;
      ProductionOrder@1000 : Record 5405;
      ProductionOrderNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Routing] [Production Order]
      // [SCENARIO] Verify Expected Capacity Need on Production Order Routing Line after change Status - Simulated to Released.

      // Setup: Create Production Item setup with Routing and Production BOM. Create and Refresh Simulated Production Order.
      Initialize;
      CreateProductionItemsSetupWithRouting(Item);
      CreateAndRefreshSimulatedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));

      // Exercise: Change Status of the Production Order - Simulated to Released.
      ProductionOrderNo := LibraryManufacturing.ChangeStatusSimulatedToReleased(ProductionOrder."No.");

      // Verify: Verify Expected Capacity Need on Production Order Routing Line.
      VerifyProductionOrderRoutingLine(ProductionOrderNo);
    END;

    [Test]
    PROCEDURE SimulatedProductionOrderChangeStatusToFirmPlanned@141();
    VAR
      Item@1002 : Record 27;
      ProductionOrder@1000 : Record 5405;
      ProductionOrderNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Routing] [Production Order]
      // [SCENARIO] Verify Expected Capacity Need on Production Order Routing Line after change Status - Simulated to Firm Planned.

      // Setup: Create Production Item setup with Routing and Production BOM. Create and Refresh Simulated Production Order.
      Initialize;
      CreateProductionItemsSetupWithRouting(Item);
      CreateAndRefreshSimulatedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));

      // Exercise: Change Status of the Production Order - Simulated to Firm Planned.
      ProductionOrderNo := LibraryManufacturing.ChangeStatusFirmPlanToReleased(
          ProductionOrder."No.",ProductionOrder.Status::Simulated,ProductionOrder.Status::"Firm Planned");

      // Verify: Verify Expected Capacity Need on Production Order Routing Line.
      VerifyProductionOrderRoutingLine(ProductionOrderNo);
    END;

    [Test]
    [HandlerFunctions(PostProdJournalByPageHandler,ConfirmHandlerTRUE,MessageHandler)]
    PROCEDURE UpdateDimensionOnReleasedProdOrderLineByProdLine@151();
    BEGIN
      DimensionOnReleasedProdOrder(UpdateDimensionMethod::ByProductionOrderLine);
    END;

    [Test]
    [HandlerFunctions(PostProdJournalByPageHandler,EditDimensionSetEntriesPageHandler,ConfirmHandlerTRUE,MessageHandler)]
    PROCEDURE UpdateDimensionOnReleasedProdOrderLineByShowDimensionsOnLine@193();
    BEGIN
      DimensionOnReleasedProdOrder(UpdateDimensionMethod::ByShowDimensionsOnLine);
    END;

    [Test]
    [HandlerFunctions(PostProdJournalByPageHandler,ConfirmHandlerTRUE,MessageHandler)]
    PROCEDURE UpdateDimensionOnReleasedProdOrderLineByProdOrder@194();
    BEGIN
      DimensionOnReleasedProdOrder(UpdateDimensionMethod::ByProductionOrder);
    END;

    LOCAL PROCEDURE DimensionOnReleasedProdOrder@188(UpdateDimensionFrom@1006 : Option);
    VAR
      ParentItem@1004 : Record 27;
      DimensionValue@1009 : Record 349;
      ProductionOrder@1010 : Record 5405;
      ItemLedgerEntry@1000 : Record 32;
      ComponentItemNo@1001 : Code[20];
    BEGIN
      // Setup: Create Production Item with dimension and update dimension on Production Order Line.
      Initialize;
      CreateItemAndReleasedProdOrderWithDimAndRouting(ParentItem,ProductionOrder,ComponentItemNo);

      // Exercise: Update the dimension. Open and Post the Production Journal.
      UpdateDimensionMethod := UpdateDimensionFrom;
      CASE UpdateDimensionMethod OF
        UpdateDimensionMethod::ByProductionOrderLine:
          UpdateGlobalDimensionByProductionOrderLine(DimensionValue,ProductionOrder);
        UpdateDimensionMethod::ByShowDimensionsOnLine:
          UpdateGlobalDimensionByShowDimensionsOnLine(DimensionValue,ProductionOrder);
        UpdateDimensionMethod::ByProductionOrder:
          UpdateGlobalDimensionByProductionOrder(DimensionValue,ProductionOrder);
      END;
      PostProductionJournal(ProductionOrder);

      // Verify: Verify the dimension on the Item Ledger Entry for ParentItem and ComponentItem. Verify the dimension on the Prod. Order Component.
      VerifyDimensionOnItemLedgerEntry(ProductionOrder."No.",ParentItem."No.",ItemLedgerEntry."Entry Type"::Output,DimensionValue);
      VerifyDimensionOnItemLedgerEntry(ProductionOrder."No.",ComponentItemNo,ItemLedgerEntry."Entry Type"::Consumption,DimensionValue);
      VerifyDimensionOnProdOrderComponent(ProductionOrder.Status,ProductionOrder."No.",ComponentItemNo,DimensionValue);
    END;

    [Test]
    PROCEDURE OutputJournalWithRouting@181();
    BEGIN
      OutputJournalAfterUpdateDimensionOnReleasedProdOrderLine(TRUE);
    END;

    [Test]
    PROCEDURE OutputJournalWithoutRouting@183();
    BEGIN
      OutputJournalAfterUpdateDimensionOnReleasedProdOrderLine(FALSE);
    END;

    LOCAL PROCEDURE OutputJournalAfterUpdateDimensionOnReleasedProdOrderLine@163(WithRouting@1000 : Boolean);
    VAR
      ParentItem@1003 : Record 27;
      DimensionValue@1002 : Record 349;
      ProductionOrder@1001 : Record 5405;
      ComponentItemNo@1005 : Code[20];
    BEGIN
      // Setup: Create Production Item with dimension and update dimension on Production Order Line.
      Initialize;
      IF WithRouting THEN
        CreateItemAndReleasedProdOrderWithDimAndRouting(ParentItem,ProductionOrder,ComponentItemNo)
      ELSE
        CreateItemAndReleasedProdOrderWithDim(ParentItem,ProductionOrder);

      // Exercise: Update the dimension. Create and Explode Routing for Output Journal.
      UpdateGlobalDimensionByProductionOrderLine(DimensionValue,ProductionOrder);
      OutputJournalExplodeRouting(ProductionOrder."No.");

      // Verify: Verify the dimension on Output Journal Line.
      VerifyDimensionOnOutputJournalLine(ParentItem."No.",DimensionValue);
    END;

    [Test]
    PROCEDURE TFS358868_CapacityEntryPostingDoesNotRequireBin@196();
    VAR
      ProductionOrder@1001 : Record 5405;
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      // Verify that bin code is not checked on production output lines that post only capacity ledger entries, and not actual output
      Initialize;

      CreateProductionOrderOnLocationWithBin(ProductionOrder,ProdOrderLine);

      CreateOutputJournalLine(OutputItemJournalBatch,ProdOrderLine,20);
      LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);

      VerifyCapacityEntryPosted(ProductionOrder."No.",ProductionOrder."Source No.");
    END;

    [Test]
    PROCEDURE TFS358868_OutputEntryPostingRequiresBin@198();
    VAR
      ProductionOrder@1001 : Record 5405;
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      // Verify that bin code is checked on the last production output line
      Initialize;

      CreateProductionOrderOnLocationWithBin(ProductionOrder,ProdOrderLine);

      CreateJournalLineLastOutput(OutputItemJournalBatch,ProdOrderLine,'');

      ASSERTERROR LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
      Assert.ExpectedError(BinCodeMustHaveValueErr);
    END;

    [Test]
    PROCEDURE TFS358868_ConsumptionPostingWithBin@203();
    VAR
      ProductionOrder@1001 : Record 5405;
      ProdOrderLine@1002 : Record 5406;
      Bin@1000 : Record 7354;
      Item@1004 : Record 27;
    BEGIN
      // Verify that bin code is checked on the last production output line
      Initialize;

      CreateProductionOrderOnLocationWithBin(ProductionOrder,ProdOrderLine);
      UpdateFlushingMethodOnProdOrderComponent(ProductionOrder.Status,ProductionOrder."No.");

      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),'','');
      FindProdOrderComponentItem(Item,ProductionOrder.Status,ProductionOrder."No.");
      LibraryPatterns.POSTPositiveAdjustment(Item,LocationSilver.Code,'',Bin.Code,1,WORKDATE,0);
      PostConsumptionJournalLine(ProdOrderLine,Item,WORKDATE,LocationSilver.Code,Bin.Code,1);

      VerifyItemLedgerEntryPosted(ProductionOrder."No.",Item."No.",'');
    END;

    [Test]
    PROCEDURE TFS358868_OutputPostingWithBin@199();
    VAR
      ProductionOrder@1001 : Record 5405;
      ProdOrderLine@1002 : Record 5406;
      Bin@1000 : Record 7354;
    BEGIN
      // Verify that bin code is checked on the last production output line
      Initialize;

      CreateProductionOrderOnLocationWithBin(ProductionOrder,ProdOrderLine);

      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),'','');
      CreateJournalLineLastOutput(OutputItemJournalBatch,ProdOrderLine,Bin.Code);

      LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);

      VerifyItemLedgerEntryPosted(ProductionOrder."No.",ProductionOrder."Source No.",'');
    END;

    [Test]
    PROCEDURE ProdOrderLineBinCopiedFromSalesLineWhenFromProdBinCodeBlank@206();
    VAR
      SalesLine@1000 : Record 37;
      ProductionOrder@1001 : Record 5405;
      ProdOrderLine@1003 : Record 5406;
    BEGIN
      // [FEATURE] [Production Order] [Warehouse]
      // [SCENARIO 361569] "Bin Code" in prod. order line is taken from Sales Line in the production order that uses sales order as a source and its location has blank "From-Production Bin Code"
      Initialize;

      // [GIVEN] Location X with "Bin Mandatory" and empty "From-Production Bin Code"
      // [GIVEN] Sales order with Location Code = X
      CreateSalesOrderWithLocation(SalesLine,LocationSilver.Code,LibraryUtility.GenerateGUID);

      // [GIVEN] Production order that uses sales order as a source, where Sales Line's "Bin Code" = "B"
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ProductionOrder."Source Type"::"Sales Header",
        SalesLine."Document No.",LibraryRandom.RandDec(100,2));

      // [WHEN] Production order is refreshed
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);

      // [THEN] Bin code in prod. order line is "B"
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
      Assert.AreEqual(
        SalesLine."Bin Code",ProdOrderLine."Bin Code",
        STRSUBSTNO(WrongFieldValueErr,ProdOrderLine.FIELDCAPTION("Bin Code"),ProdOrderLine.TABLECAPTION,SalesLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE ProdOrderLineBinCopiedFromLocationIfPickRequired@217();
    VAR
      Location@1002 : Record 14;
      SalesLine@1000 : Record 37;
      ProductionOrder@1001 : Record 5405;
      ProdOrderLine@1003 : Record 5406;
    BEGIN
      // [FEATURE] [Production Order] [Warehouse]
      // [SCENARIO 361569] Bin code is not copied from sales line in the production order that uses sales order as a source if pick is required on location
      Initialize;

      // [GIVEN] Location X with "Require Pick" and "From-Production Bin Code" = "B"
      CreateLocationWithProductionAndPick(Location);

      // [GIVEN] Sales order with Location Code = X
      CreateSalesOrderWithLocation(SalesLine,Location.Code,LibraryUtility.GenerateGUID);

      // [GIVEN] Production order that uses sales order as a source
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ProductionOrder."Source Type"::"Sales Header",
        SalesLine."Document No.",LibraryRandom.RandDec(100,2));

      // [WHEN] Production order is refreshed
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);

      // [THEN] Bin code in prod. order line is "B"
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
      Assert.AreEqual(
        Location."From-Production Bin Code",ProdOrderLine."Bin Code",
        STRSUBSTNO(WrongFieldValueErr,ProdOrderLine.FIELDCAPTION("Bin Code"),ProdOrderLine.TABLECAPTION,Location.TABLECAPTION));
    END;

    [Test]
    PROCEDURE ValidateItemNoInSalesPlanningLineSetsLowLevelCode@219();
    VAR
      Item@1000 : Record 27;
      SalesPlanningLine@1001 : Record 99000800;
    BEGIN
      // [FEATURE] [Production Order]
      // [SCENARIO 361569] "Low-Level Code" in Sales Planning Line is copied from Item when "Item No." is validated
      // [GIVEN] Item with "Low-Level Code" = "X"
      LibraryInventory.CreateItem(Item);
      Item."Low-Level Code" := LibraryRandom.RandInt(100);
      Item.MODIFY;

      // [WHEN] Item No. in Sales Planning Line is set and validated
      SalesPlanningLine.INIT;
      SalesPlanningLine.VALIDATE("Item No.",Item."No.");

      // [THEN] "Low-Level Code" in Sales Planning Line is "X"
      Assert.AreEqual(
        Item."Low-Level Code",SalesPlanningLine."Low-Level Code",
        STRSUBSTNO(WrongFieldValueErr,SalesPlanningLine.FIELDCAPTION("Low-Level Code"),SalesPlanningLine.TABLECAPTION,Item.TABLECAPTION));
    END;

    [Test]
    PROCEDURE OutputJnlRoutingRefCopiedFromProdOrderLine@218();
    VAR
      ProductionOrder@1001 : Record 5405;
      ProdOrderLine@1002 : Record 5406;
      ItemJnlLine@1000 : Record 83;
    BEGIN
      // [FEATURE] [Production Order]
      // [SCENARIO 361710] "Routing No." and "Routing Reference No." in item journal are copied from production order line when "Order Line No. " is validated
      // [GIVEN] Production Order "N" with one line, Line No. = "L", Routing No. = "X", Routing Reference No. = "Y"
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,CreateItemWithRouting,LibraryRandom.RandInt(100));
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");

      // [GIVEN] Output journal line for prod. order "N"
      ItemJnlLine.VALIDATE("Entry Type",ItemJnlLine."Entry Type"::Output);
      ItemJnlLine.VALIDATE("Order Type",ItemJnlLine."Order Type"::Production);
      ItemJnlLine.VALIDATE("Order No.",ProductionOrder."No.");

      // [WHEN] "Order Line No." in output journal is set to "L"
      ItemJnlLine.VALIDATE("Order Line No.",ProdOrderLine."Line No.");

      // [THEN] "Routing No." is "X" and "Routing Reference No." is "Y" in output journal
      Assert.AreEqual(
        ProdOrderLine."Routing No.",ItemJnlLine."Routing No.",
        STRSUBSTNO(
          WrongFieldValueErr,ItemJnlLine.FIELDCAPTION("Routing No."),ItemJnlLine.TABLECAPTION,ProdOrderLine.TABLECAPTION));
      Assert.AreEqual(
        ProdOrderLine."Routing Reference No.",ItemJnlLine."Routing Reference No.",
        STRSUBSTNO(
          WrongFieldValueErr,ItemJnlLine.FIELDCAPTION("Routing Reference No."),ItemJnlLine.TABLECAPTION,ProdOrderLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE ProdOrderRoutingWithTwoShopCalendars@227();
    VAR
      WorkCenter1@1000 : Record 99000754;
      WorkCenter2@1001 : Record 99000754;
      RoutingHeader@1002 : Record 99000763;
      RoutingLine@1003 : Record 99000764;
      ProductionOrder@1004 : Record 5405;
      Item@1005 : Record 27;
    BEGIN
      // [FEATURE] [Routing] [Refresh Production Order]
      // [SCENARIO 363426] When refreshing back Production Order with different Shop Calendars for Routing lines, first Prod. Order Routing Line starting-ending time is within worktime.

      // [GIVEN] Two work centers: "WC1" work shift - from 06:00:00 to 22:00:00, "WC2" work shift - from 00:00:00 to 23:59:59
      Initialize;

      // [GIVEN] Set WORKDATE to saturday
      WORKDATE(CALCDATE('<WD6>',WORKDATE)); // Saturday
      CreateWorkCenter(WorkCenter1,060000T,220000T); // time values needed for test
      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter1,CALCDATE('<-6M>',WORKDATE),CALCDATE('<6M>',WORKDATE));
      CreateWorkCenter(WorkCenter2,000000T,235959T); // time values needed for test
      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter2,CALCDATE('<-6M>',WORKDATE),CALCDATE('<6M>',WORKDATE));

      // [GIVEN] Create Item "I" with routing, having three lines:
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);

      // [GIVEN] Line 1: "WC1", run time 33 minutes
      CreateWorkCenterRoutingLine(RoutingLine,RoutingHeader,WorkCenter1."No.",0,33,0,0); // specific values needed for test

      // [GIVEN] Line 2: "WC2", wait time 7200 minutes, move time 432 minutes
      CreateWorkCenterRoutingLine(RoutingLine,RoutingHeader,WorkCenter2."No.",0,0,7200,432);

      // [GIVEN] Line 3: "WC1", run time 66 minutes, wait time 900 minutes, move time 400 minutes
      CreateWorkCenterRoutingLine(RoutingLine,RoutingHeader,WorkCenter1."No.",0,66,900,400);

      ChangeStatusOfProductionRoutingHeader(RoutingHeader,RoutingHeader.Status::Certified);

      CreateItem(Item,Item."Replenishment System"::"Prod. Order");
      UpdateRoutingAndBOMOnItem(Item,'',RoutingHeader."No.");

      // [GIVEN] Create Released Production Order with item "I"
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,Item."No.",1);

      // [WHEN] Refresh order back
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,FALSE,FALSE);

      // [THEN] First Production Order Routing Line has Starting Time = 21:27:00, Ending Time = 22:00:00
      VerifyProductionOrderRoutingLineTimes(ProductionOrder."No.",212700T,220000T); // specific expected values of test
    END;

    [Test]
    [HandlerFunctions(LotItemTrackingPageHandler,ConfirmQstHandlerTRUE,ProductionJournalPageHandler2,MessageHandler)]
    PROCEDURE LotTrackingOnProductionOrderComponent@221();
    VAR
      ItemTrackingCode@1001 : Record 6502;
      ParentItem@1007 : Record 27;
      CompItem@1002 : Record 27;
      ProductionBOMHeader@1004 : Record 99000771;
      ProductionOrder@1009 : Record 5405;
      ProdOrderLine@1000 : Record 5406;
      ProdOrderComponent@1003 : Record 5407;
      LotNo@1008 : Code[20];
      Quantity@1005 : Decimal;
      PartQuantity@1006 : Decimal;
    BEGIN
      // [FEATURE] [Item Tracking] [Production Journal] [Consumption]
      // [SCENARIO 363503] Can post Production Journal consumption for lot tracked Item, if reservation Entry exist.

      // [GIVEN] Production Item "X" with BOM of component Item "Y" (component is lot tracked).
      Initialize;
      PartQuantity := LibraryRandom.RandInt(10);
      Quantity := LibraryRandom.RandIntInRange(100,1000);
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateTrackedItem(
        CompItem,CompItem."Replenishment System"::Purchase,
        CompItem."Reordering Policy"::"Lot-for-Lot",FALSE,0,ItemTrackingCode.Code);
      CreateItem(ParentItem,ParentItem."Replenishment System"::"Prod. Order");
      CreateAndCertifyProductionBOM(ProductionBOMHeader,CompItem."No.",CompItem."Base Unit of Measure");
      UpdateProductionBOMOnItem(ParentItem,ProductionBOMHeader."No.");

      // [GIVEN] "Y" has large quantity on stock of lot "Z".
      CreateAndPostItemJournalLineWithTracking(CompItem."No.",Quantity);
      LotNo := FindAssignedLotNo(CompItem."No.");

      // [GIVEN] Create released Production Order of Item "X", as "Y" stock is enough for that.
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,ParentItem."No.",Quantity);
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",CompItem."No.");
      SetLotNoOnProdOrderComponent(ProdOrderComponent,LotNo);

      // [GIVEN] Calculate regenerative plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(ParentItem,WORKDATE,WORKDATE);

      // [GIVEN] Post consumption of "Y" lot "Z" of small Quantity.
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
      SetupPostProductionJournal(ProductionOrder,ProdOrderLine."Line No.",LotNo,PartQuantity);

      // [WHEN] Post consumption of "Y" lot "Z" of small Quantity again.
      SetupPostProductionJournal(ProductionOrder,ProdOrderLine."Line No.",LotNo,PartQuantity);

      // [THEN] Consumption posted successfully.
      // Verification is done in MessageHandler
    END;

    [Test]
    PROCEDURE RefreshProdOrderBackwardWithZeroRunTime@224();
    VAR
      MachineCenter1@1000 : Record 99000758;
      MachineCenter2@1005 : Record 99000758;
      Item@1003 : Record 27;
      ProductionOrder@1004 : Record 5405;
      RunTime1@1008 : Decimal;
      WaitTime2@1009 : Decimal;
      SendAheadQty1@1002 : Decimal;
      RoutingHeaderNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Routing] [Production Order] [Send-Ahead Quantity]
      // [SCENARIO 371522] Refresh Prod. Order Backward job considers Wait Time of appropriate Routing Line if Run Time is zero
      Initialize;

      RunTime1 := LibraryRandom.RandDec(10,2);
      WaitTime2 := LibraryRandom.RandDec(10,2);
      SendAheadQty1 := LibraryRandom.RandDec(10,2);

      // [GIVEN] Routing Line "L1" with "Run Time" <> 0, "Send-Ahead Quantity" = "Q";
      // [GIVEN] Routing Line "L2" with "Run Time" = 0, "Wait Time" = "X", using Constrained Machine Center
      CreateTwoMachineCenters(MachineCenter1,MachineCenter2);
      RoutingHeaderNo := CreateRoutingHeaderWithTwoLines(
          MachineCenter1."No.",MachineCenter2."No.",RunTime1,0,0,WaitTime2,SendAheadQty1,0);
      CreateItem(Item,Item."Replenishment System"::"Prod. Order");
      UpdateRoutingAndBOMOnItem(Item,'',RoutingHeaderNo);

      // [GIVEN] Released Production Order with "Quantity" > "Q"
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,Item."No.",SendAheadQty1 + 1);

      // [WHEN] Refresh Production Order Backward
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,FALSE,FALSE);

      // [THEN] Last Prod. Order Routing Line has "Starting Date-Time" = "Ending Date-Time" - "X"
      VerifyLastProdOrderRoutingLineWaitTime(ProductionOrder."No.",WaitTime2);
    END;

    [Test]
    PROCEDURE RefreshProdOrderForwardWithZeroRunTime@262();
    VAR
      MachineCenter1@1000 : Record 99000758;
      MachineCenter2@1005 : Record 99000758;
      Item@1003 : Record 27;
      ProductionOrder@1004 : Record 5405;
      RunTime2@1006 : Decimal;
      WaitTime1@1007 : Decimal;
      SendAheadQty2@1010 : Decimal;
      RoutingHeaderNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Routing] [Production Order] [Send-Ahead Quantity]
      // [SCENARIO 371522] Refresh Prod. Order Forward job considers Wait Time of appropriate Routing Line if Run Time is zero
      Initialize;

      RunTime2 := LibraryRandom.RandDec(10,2);
      WaitTime1 := LibraryRandom.RandDec(10,2);
      SendAheadQty2 := LibraryRandom.RandDec(10,2);

      // [GIVEN] Routing Line "L1" with "Run Time" = 0, "Wait Time" = "X", using Constrained Machine Center
      // [GIVEN] Routing Line "L2" with "Run Time" <> 0, "Send-Ahead Quantity" = "Q";
      CreateTwoMachineCenters(MachineCenter1,MachineCenter2);
      RoutingHeaderNo := CreateRoutingHeaderWithTwoLines(
          MachineCenter2."No.",MachineCenter1."No.",0,RunTime2,WaitTime1,0,0,SendAheadQty2);
      CreateItem(Item,Item."Replenishment System"::"Prod. Order");
      UpdateRoutingAndBOMOnItem(Item,'',RoutingHeaderNo);

      // [GIVEN] Released Production Order with "Quantity" > "Q"
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,Item."No.",SendAheadQty2 + 1);

      // [WHEN] Refresh Production Order Forward
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,FALSE,FALSE);

      // [THEN] First Prod. Order Routing Line has "Starting Date-Time" = "Ending Date-Time" - "X"
      VerifyFirstProdOrderRoutingLineWaitTime(ProductionOrder."No.",WaitTime1);
    END;

    [Test]
    PROCEDURE RefreshProdOrderRoutingLineWaitTime@292();
    VAR
      WorkCenter@1000 : Record 99000754;
      RoutingHeader@1002 : Record 99000763;
      RoutingLine@1003 : Record 99000764;
      ProductionOrder@1004 : Record 5405;
      ProdOrderRoutingLine@1001 : Record 5409;
      Item@1005 : Record 27;
      StartingDateTime@1006 : DateTime;
    BEGIN
      // [FEATURE] [Routing] [Production Order Routing Line]
      // [SCENARIO 364340] When setting Production Order Routing Line Wait Time, its starting date-time does not change.

      // [GIVEN] Work center "WC1" work shift - from 06:00:00 to 22:00:00.
      Initialize;

      // [GIVEN] Set WORKDATE to thursday
      WORKDATE(CALCDATE('<WD4>',WORKDATE)); // Thursday
      CreateWorkCenter(WorkCenter,060000T,220000T); // time values needed for test
      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter,CALCDATE('<-1M>',WORKDATE),CALCDATE('<1M>',WORKDATE));

      // [GIVEN] Create Item "I" with routing, having two lines:
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);

      // [GIVEN] Line 1: "WC1", run time 900 minutes
      CreateWorkCenterRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.",0,900,0,0); // specific values needed for test

      // [GIVEN] Line 2: "WC1", wait time 5790 minutes
      CreateWorkCenterRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.",0,0,5760,0);

      ChangeStatusOfProductionRoutingHeader(RoutingHeader,RoutingHeader.Status::Certified);

      CreateItem(Item,Item."Replenishment System"::"Prod. Order");
      UpdateRoutingAndBOMOnItem(Item,'',RoutingHeader."No.");

      // [GIVEN] Create Released Production Order with item "I"
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,Item."No.",1);

      // [GIVEN] Refresh order back
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,FALSE,FALSE);

      // [WHEN] Validate "Wait Time" in second Prod. Order Routing Line.
      WITH ProdOrderRoutingLine DO BEGIN
        SETRANGE(Status,ProductionOrder.Status);
        SETRANGE("Prod. Order No.",ProductionOrder."No.");
        FINDLAST;
        StartingDateTime := "Starting Date-Time";
        VALIDATE("Wait Time","Wait Time");

        // [THEN] Second Production Order Routing Line "Starting Date-Time" has not changed.
        TESTFIELD("Starting Date-Time",StartingDateTime);
      END;
    END;

    [Test]
    PROCEDURE RefreshProdOrderRtngLineSendAheadRunTimeDecreases@225();
    VAR
      WorkCenter@1000 : Record 99000754;
      RoutingHeader@1002 : Record 99000763;
      RoutingLine@1003 : Record 99000764;
      ProductionOrder@1004 : Record 5405;
      ProdOrderRoutingLine@1001 : Record 5409;
      Item@1005 : Record 27;
      StartingTime@1006 : Time;
      SendAheadQty@1008 : Decimal;
      RunTime@1007 : Integer;
    BEGIN
      // [FEATURE] [Routing] [Production Order Routing Line]
      // [SCENARIO 371524] When Prod Order has Send-Ahead Quantity > 0, start of next operation should be calculated as: setup time + (send ahead qty * run time) + wait time + move time + queue time.

      // [GIVEN] Work center "WC1" work shift - from 06:00:00 to 22:00:00.
      Initialize;

      // [GIVEN] Set WORKDATE to friday
      WORKDATE(CALCDATE('<WD5>',WORKDATE)); // Friday
      CreateWorkCenter(WorkCenter,060000T,220000T); // time values needed for test
      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter,CALCDATE('<-1M>',WORKDATE),CALCDATE('<1M>',WORKDATE));

      // [GIVEN] Create Item "I" with routing, having three lines:
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);

      // [GIVEN] Line 1: "WC1", run time 1 minute, wait time 1440 * 7 minutes (i.e. a week), Send-Ahead Quantity > 0
      SendAheadQty := LibraryRandom.RandIntInRange(5,10);
      CreateWorkCenterRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.",0,1,1440 * 7,0); // specific values needed for test
      RoutingLine.VALIDATE("Send-Ahead Quantity",SendAheadQty);
      RoutingLine.MODIFY(TRUE);

      // [GIVEN] Line 2: "WC1", run time 2 minutes, Send-Ahead Quantity > 0
      CreateWorkCenterRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.",0,2,0,0); // specific values needed for test
      RoutingLine.VALIDATE("Send-Ahead Quantity",SendAheadQty);
      RoutingLine.MODIFY(TRUE);

      // [GIVEN] Line 3: "WC1", run time 2 minutes
      CreateWorkCenterRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.",0,2,0,0); // specific values needed for test

      ChangeStatusOfProductionRoutingHeader(RoutingHeader,RoutingHeader.Status::Certified);

      CreateItem(Item,Item."Replenishment System"::"Prod. Order");
      UpdateRoutingAndBOMOnItem(Item,'',RoutingHeader."No.");

      // [GIVEN] Create Released Production Order with item "I"
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,Item."No.",
        LibraryRandom.RandIntInRange(20,30));

      // [WHEN] Refresh order back
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,FALSE,FALSE);

      // [THEN] "Starting Time" increases from line to line by "Run Time" amount
      WITH ProdOrderRoutingLine DO BEGIN
        SETRANGE(Status,ProductionOrder.Status);
        SETRANGE("Prod. Order No.",ProductionOrder."No.");
        FINDSET;
        StartingTime := "Starting Time";
        RunTime := "Run Time" * SendAheadQty * CalendarMgt.TimeFactor("Run Time Unit of Meas. Code");
        WHILE NEXT <> 0 DO BEGIN
          TESTFIELD("Starting Time",StartingTime + RunTime);
          StartingTime := "Starting Time";
          RunTime := "Run Time" * SendAheadQty * CalendarMgt.TimeFactor("Run Time Unit of Meas. Code");
        END;
      END;
    END;

    [Test]
    PROCEDURE ProdOrderCompletelyPickedForNotSuppliedComponents@236();
    VAR
      ProductionOrder@1000 : Record 5405;
      ProdOrderComponent@1001 : Record 5407;
    BEGIN
      // [FEATURE] [UT] [Production Order Component]
      // [SCENARIO 375248] Field "Completely Picked" of Production Order table should be calculated for not supplied Components

      // [GIVEN] Production Order with not Supplied Completely Picked Component
      CreateRelProdOrder(ProductionOrder);
      CreateProdOrderComp(ProdOrderComponent,ProductionOrder."No.",0,TRUE);

      // [WHEN] CALCFIELDS for "Completely Picked" of Production Order
      ProductionOrder.CALCFIELDS("Completely Picked");

      // [THEN] "Completely Picked" of Production Order is "TRUE"
      ProductionOrder.TESTFIELD("Completely Picked",TRUE);
    END;

    [Test]
    PROCEDURE ProdOrderCompletelyPickedForSuppliedComponents@256();
    VAR
      ProductionOrder@1000 : Record 5405;
      ProdOrderComponent@1001 : Record 5407;
    BEGIN
      // [FEATURE] [UT] [Production Order Component]
      // [SCENARIO 375248] Field "Completely Picked" of Production Order table should not be calculated for supplied Components

      // [GIVEN] Production Order with Supplied Completely Picked Component
      CreateRelProdOrder(ProductionOrder);
      CreateProdOrderComp(ProdOrderComponent,ProductionOrder."No.",LibraryRandom.RandInt(9),TRUE);

      // [WHEN] CALCFIELDS for "Completely Picked" of Production Order
      ProductionOrder.CALCFIELDS("Completely Picked");

      // [THEN] "Completely Picked" of Production Order is "FALSE"
      ProductionOrder.TESTFIELD("Completely Picked",FALSE);
    END;

    [Test]
    [HandlerFunctions(CreateOrderFromSalesModalPageHandler,MessageHandler,ReservationModalPageHandler,ConfirmHandlerTRUE)]
    PROCEDURE CancelReservationOnProdOrderFromSalesOrderPlanning@324();
    VAR
      SalesLine@1006 : Record 37;
      ProductionOrder@1008 : Record 5405;
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      // [FEATURE] [Item Tracking] [Reservation] [Order-to-Order Binding]
      // [SCENARIO 136404] "Order-to-Order" binding erased when Reservation cancelled for Tracked Item in Prod. Order.

      // [GIVEN] Lot tracked Item, "Reserve" = "Never", "Order Tracking Policy" = "Tracking & Action Msg.". Create Sales Order.
      Initialize;
      CreateSalesOrderWithLotTrackedItemSetup(SalesLine);
      LibraryVariableStorage.Enqueue(FirmPlannedProdOrderCreatedTxt); // Enqueue value for MessageHandler.

      // [GIVEN] Create Prod. Order from Sales Order Planning.
      LibraryPlanning.CreateProdOrderUsingPlanning(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",SalesLine."Document No.",SalesLine."No.");

      // [WHEN] Cancel resevation.
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
      ProdOrderLine.ShowReservation;

      // [THEN] Binding set to empty for reservation entries.
      VerifyReservationEntry(SalesLine."No.");
    END;

    [Test]
    PROCEDURE RefreshProdOrderRoutingLineWaitTimeBackOneDay@239();
    VAR
      WorkCenter@1000 : Record 99000754;
      CapacityUnitOfMeasure@1001 : Record 99000780;
      RoutingHeader@1002 : Record 99000763;
      RoutingLine@1003 : Record 99000764;
      ProductionOrder@1004 : Record 5405;
      Item@1005 : Record 27;
      Direction@1009 : 'Forward,Backward';
      CalcMethod@1008 : 'No Levels,One level,All levels';
    BEGIN
      // [FEATURE] [Routing] [Production Order Routing Line]
      // [SCENARIO 375635] Production Order refreshed "Back" should keep Starting Date-Time on Replan "Back"
      Initialize;

      // [GIVEN] Item "I" with routing, having 2 lines:
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);

      // [GIVEN] Line 1: "WC1", run time 1 minutes
      CreateWorkCenter(WorkCenter,080000T,160000T); // time values needed for test
      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter,CALCDATE('<-1M>',WORKDATE),CALCDATE('<1M>',WORKDATE));
      CreateWorkCenterRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.",0,0,0,0);

      // [GIVEN] Line 2: "WC2", wait time 1 day
      LibraryManufacturing.CreateWorkCenterFullWorkingWeek(WorkCenter,080000T,230000T); // time values needed for test
      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter,CALCDATE('<-1M>',WORKDATE),CALCDATE('<1M>',WORKDATE));
      CapacityUnitOfMeasure.SETRANGE(Type,CapacityUnitOfMeasure.Type::Days);
      CapacityUnitOfMeasure.FINDFIRST;
      WorkCenter.VALIDATE("Queue Time",1);
      WorkCenter.VALIDATE("Queue Time Unit of Meas. Code",CapacityUnitOfMeasure.Code);
      WorkCenter.MODIFY(TRUE);
      CreateWorkCenterRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.",0,0,0,0);

      ChangeStatusOfProductionRoutingHeader(RoutingHeader,RoutingHeader.Status::Certified);

      CreateItem(Item,Item."Replenishment System"::"Prod. Order");
      UpdateRoutingAndBOMOnItem(Item,'',RoutingHeader."No.");

      // [GIVEN] Create Released Production Order "PO" with item "I"
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,Item."No.",1);

      // [GIVEN] "PO"."Due Date" = 17/02/2017
      ProductionOrder.VALIDATE("Due Date",WORKDATE);
      ProductionOrder.VALIDATE("Location Code",LocationBlue.Code);
      ProductionOrder.MODIFY(TRUE);

      // [GIVEN] Refresh "PO" back
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,FALSE,FALSE);

      // [GIVEN] "PO"."Starting DateTime" = 15/02/2017
      VerifyProdOrderLineStartingDateTime(ProductionOrder,'Wrong starting date-time on Refresh');

      // [WHEN] Replan "PO" with "Back" and "No Levels" options
      LibraryManufacturing.RunReplanProductionOrder(ProductionOrder,Direction::Backward,CalcMethod::"No Levels");

      // [THEN] "PO"."Starting DateTime" = 15/02/2017
      VerifyProdOrderLineStartingDateTime(ProductionOrder,'Wrong starting date-time on Replan');
    END;

    [Test]
    PROCEDURE InsertRoutingLineWithBlankRoutingNo@241();
    VAR
      ProdOrderRoutingLine@1000 : Record 5409;
    BEGIN
      // [FEATURE] [Routing Line] [UT]
      // [SCENARIO 375749] Inserting Routing line should be prohibited if "Routing No." is blank
      Initialize;

      // [GIVEN] Prod. Order Routing Line with blank "Routing No."
      ProdOrderRoutingLine.INIT;

      // [WHEN] Insert Prod. Order Routing Line
      ASSERTERROR ProdOrderRoutingLine.INSERT(TRUE);

      // [THEN] Error is thrown: "Routing No. must have a value in Prod. Order Routing Line"
      Assert.ExpectedError(RoutingHeaderExistErr);
    END;

    [Test]
    PROCEDURE RefreshProdOrderBackWithEndingTimeBlank@20();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1003 : Record 5405;
      WaitTime@1001 : Decimal;
    BEGIN
      // [FEATURE] [Routing] [Production Order Routing Line]
      // [SCENARIO 376121] "Wait Time" of Routing Line should be Considered when Refreshing Production Order Back if "Ending Time" is 0:00:00 and Calenadrar Entry exists for ending day
      Initialize;

      // [GIVEN] Routing Line with "Wait Time" = "10 minutes"
      CreateItemWithRoutingAndWaitTime(Item,WaitTime);

      // [GIVEN] Released Production Order with "Due Date" = "30.09.2015", "Ending Time" = "0:00:00"
      CreateRelProdOrderWithDateTime(ProductionOrder,Item."No.",WORKDATE,WORKDATE);

      // [WHEN] Resfresh Production Order "Back"
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,FALSE,FALSE);

      // [THEN] Prod. Order Routing Line is created with "Starting Date-Time" = "29.09.2015 23:50"
      VerifyProdOrderRoutingLine(ProductionOrder."No.",WaitTime);
    END;

    [Test]
    PROCEDURE RefreshProdOrderBackWithEndingTimeBlankNoCalendarEntry@248();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1003 : Record 5405;
      WaitTime@1001 : Decimal;
    BEGIN
      // [FEATURE] [Routing] [Production Order Routing Line]
      // [SCENARIO 376121] "Wait Time" of Routing Line should be Considered when Refreshing Production Order Back if "Ending Time" is 0:00:00 and Calenadrar Entry does not exist for ending day
      Initialize;

      // [GIVEN] Routing Line with "Wait Time" = "10 minutes"
      CreateItemWithRoutingAndWaitTime(Item,WaitTime);

      // [GIVEN] Released Production Order with "Due Date" = "30.09.2015", "Ending Time" = "0:00:00" with no Calendar Entry on 30.09.2015
      CreateRelProdOrderWithDateTime(ProductionOrder,Item."No.",WORKDATE + 2,WORKDATE + 3);

      // [WHEN] Resfresh Production Order "Back"
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,FALSE,FALSE);

      // [THEN] Prod. Order Routing Line is created with "Starting Date-Time" = "29.09.2015 23:50"
      VerifyProdOrderRoutingLine(ProductionOrder."No.",WaitTime);
    END;

    [Test]
    [HandlerFunctions(LotItemTrackingPageHandler,PostProdJournalByPageHandler,ConfirmHandlerTRUE,MessageHandler)]
    PROCEDURE FlushedComponentDoesNotInheritOutputItemTrackingRequirements@3();
    VAR
      ProdItem@1001 : Record 27;
      ProductionOrder@1000 : Record 5405;
      CompItemNo@1003 : Code[20];
      ProdLotNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Flushing] [Item Tracking]
      // [SCENARIO 381952] Component without item tracking is flushed when output of tracked item is posted.
      Initialize;

      // [GIVEN] Production lot-tracked item "I".
      // [GIVEN] Item "C" that is a component of "I" and has no tracking code.
      CompItemNo := CreateProductionItemsSetupWithRouting(ProdItem);
      UpdateTrackingCodeOnItem(ProdItem);

      // [GIVEN] Item "C" is in stock.
      CreateAndPostItemJournalLine(CompItemNo);

      // [GIVEN] Released Production Order for "I". Lot "L" is assigned to the Prod. Order Line.
      CreateAndRefreshReleasedProdOrderWithFlushedComponent(ProductionOrder,ProdItem."No.",CompItemNo);
      ProdLotNo := LibraryUtility.GenerateGUID;
      UpdateItemTrackingOnProdOrderLine(ProductionOrder,ProdLotNo);

      // [WHEN] Post the output of "I".
      PostProductionJournal(ProductionOrder);

      // [THEN] Item "I" is posted with lot "L".
      VerifyItemLedgerEntryPosted(ProductionOrder."No.",ProdItem."No.",ProdLotNo);

      // [THEN] Consumption of "C" is posted without lot no.
      VerifyItemLedgerEntryPosted(ProductionOrder."No.",CompItemNo,'');
    END;

    [Test]
    [HandlerFunctions(LotItemTrackingPageHandler,ItemTrackingSummaryPageHandler,PostProdJournalByPageHandler,ConfirmHandlerTRUE,MessageHandler)]
    PROCEDURE ItemTrackingOfFlushedComponentIsNotMixedWithItemTrackingOfOutput@287();
    VAR
      ProdItem@1001 : Record 27;
      CompItem@1002 : Record 27;
      ProductionOrder@1000 : Record 5405;
      ProdLotNo@1003 : Code[20];
      CompLotNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Flushing] [Item Tracking]
      // [SCENARIO 381952] Flushed component and production item are posted with their own item tracking when the production journal is posted.
      Initialize;

      // [GIVEN] Production lot-tracked item "I".
      // [GIVEN] Lot-tracked item "C" that is a component of "I".
      CompItem.GET(CreateProductionItemsSetupWithRouting(ProdItem));
      UpdateTrackingCodeOnItem(ProdItem);
      UpdateTrackingCodeOnItem(CompItem);

      // [GIVEN] Item "C" is in stock with assigned lot no. "LC".
      CreateAndPostItemJournalLineWithTracking(CompItem."No.",LibraryRandom.RandIntInRange(20,40));
      CompLotNo := FindAssignedLotNo(CompItem."No.");

      // [GIVEN] Released Production Order for "I". Lot "LI" is assigned to the Prod. Order Line.
      // [GIVEN] Lot "LC" is selected on Prod. Order Component "C".
      CreateAndRefreshReleasedProdOrderWithFlushedComponent(ProductionOrder,ProdItem."No.",CompItem."No.");
      ProdLotNo := LibraryUtility.GenerateGUID;
      UpdateItemTrackingOnProdOrderLine(ProductionOrder,ProdLotNo);
      UpdateItemTrackingOnProdOrderComponent(ProductionOrder,CompItem."No.");

      // [WHEN] Post the output of "I".
      PostProductionJournal(ProductionOrder);

      // [THEN] Item "I" is posted with lot "LI".
      VerifyItemLedgerEntryPosted(ProductionOrder."No.",ProdItem."No.",ProdLotNo);

      // [THEN] Item "C" is posted with lot "LC".
      VerifyItemLedgerEntryPosted(ProductionOrder."No.",CompItem."No.",CompLotNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTRUE)]
    PROCEDURE WhereUsedShowsBOMStructureForCertifiedVersionOfClosedBOM@253();
    VAR
      ParentItem@1002 : Record 27;
      VersionItem@1004 : Record 27;
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionBOMVersion@1000 : Record 99000779;
      ProdBOMWhereUsed@1005 : TestPage 99000811;
    BEGIN
      // [FEATURE] [Production BOM Version] [Where-Used]
      // [SCENARIO 382354] "Where-Used" report should show BOM structure for an item included in a certified version of a closed BOM

      // [GIVEN] Item "PI" with a closed production BOM "B"
      CreateClosedProductionBOM(ProductionBOMHeader,ParentItem);
      // [GIVEN] Create a certified version of the BOM "B"
      // [GIVEN] Item "CI" is included in the certified version
      CreateProductionBOMVersionWithNewItem(VersionItem,ProductionBOMHeader,ProductionBOMVersion.Status::Certified);

      // [WHEN] Run where-used list for item "CI"
      OpenProdBOMWhereUsedPage(ProdBOMWhereUsed,VersionItem);

      // [THEN] Item "PI" shown in the report
      ProdBOMWhereUsed.FIRST;
      ProdBOMWhereUsed."Item No.".ASSERTEQUALS(ParentItem."No.");
    END;

    [Test]
    PROCEDURE WhereUsedDoesNotShowBOMStructureForClosedVersionOfCertifiedBOM@263();
    VAR
      ParentItem@1002 : Record 27;
      VersionItem@1004 : Record 27;
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionBOMVersion@1000 : Record 99000779;
      ProdBOMWhereUsed@1005 : TestPage 99000811;
    BEGIN
      // [FEATURE] [Production BOM Version] [Where-Used]
      // [SCENARIO 382354] "Where-Used" report should not show BOM structure for an item included in a closed version of production BOM

      // [GIVEN] Item "PI" with a certified production BOM "B"
      CreateProductionItemSetup(ParentItem);
      ProductionBOMHeader.GET(ParentItem."Production BOM No.");

      // [GIVEN] Create and close a version of the BOM "B"
      // [GIVEN] Item "CI" is included in the closed version
      CreateProductionBOMVersionWithNewItem(VersionItem,ProductionBOMHeader,ProductionBOMVersion.Status::Closed);

      // [WHEN] Run where-used list for item "CI"
      OpenProdBOMWhereUsedPage(ProdBOMWhereUsed,VersionItem);

      // [THEN] Empty list opens
      ProdBOMWhereUsed.FIRST;
      ProdBOMWhereUsed."Item No.".ASSERTEQUALS('');
    END;

    [Test]
    [HandlerFunctions(PostProdJournalByPageHandler,ConfirmHandlerTRUE,MessageHandler)]
    PROCEDURE DimsLackingInProdOrderLinesAreAddedToFlushedCompFromProdOrderComp@247();
    VAR
      ProdItem@1000 : Record 27;
      CompItem@1002 : Record 27;
      RoutingLink@1006 : Record 99000777;
      RoutingLink2@1007 : Record 99000777;
      Dimension@1005 : ARRAY [2] OF Record 348;
      DimensionValue@1008 : ARRAY [3] OF Record 349;
      ProductionOrder@1004 : Record 5405;
    BEGIN
      // [FEATURE] [Flushing] [Dimension]
      // [SCENARIO 382397] Flushed consumption should have a dimension set which is a combination of dimension sets of Prod. Order Line and Prod. Order Component with a priority of Prod. Order Line's.
      Initialize;

      // [GIVEN] Production item "P", component item "C".
      // [GIVEN] Flushing Method for the component "C" is set to "Backward", so its consumption will be posted automatically on posting the output of "P".
      LibraryManufacturing.CreateRoutingLink(RoutingLink);
      LibraryManufacturing.CreateRoutingLink(RoutingLink2);
      CompItem.GET(CreateProductionItemsSetupWithRoutingLinkCode(ProdItem,RoutingLink.Code,RoutingLink2.Code));

      // [GIVEN] Dimension "Dim1" with two values "Dim1-P" and "Dim1-C". "Dim1-P" value is assigned to item "P", "Dim1-C" is assigned to item "C".
      LibraryDimension.CreateDimension(Dimension[1]);
      UpdateDefaultDimensionOnItem(DimensionValue[1],Dimension[1].Code,CompItem."No.");
      UpdateDefaultDimensionOnItem(DimensionValue[2],Dimension[1].Code,ProdItem."No.");

      // [GIVEN] Dimension "Dim2" with value "Dim2-C" is assigned to item "C".
      LibraryDimension.CreateDimension(Dimension[2]);
      UpdateDefaultDimensionOnItem(DimensionValue[3],Dimension[2].Code,CompItem."No.");

      // [GIVEN] Item "C" is in stock.
      CreateAndPostItemJournalLine(CompItem."No.");

      // [GIVEN] Released production order for "P".
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,ProdItem."No.",LibraryRandom.RandInt(10));

      // [WHEN] Post the output of "P".
      PostProductionJournal(ProductionOrder);

      // [THEN] The consumption of "C" is posted.
      // [THEN] Consumption item entry has dimension "Dim1" with "Dim1-P" value, and dimension "Dim2" with "Dim2-C" value.
      VerifyDimensionsOnItemLedgerEntry(ProductionOrder."No.",CompItem."No.",DimensionValue[2],DimensionValue[3]);
    END;

    [Test]
    PROCEDURE LongProductionOrderWithSendAheadCanBeRefreshed@242();
    VAR
      Item@1000 : Record 27;
      RoutingHeader@1001 : Record 99000763;
      ProductionOrder@1004 : Record 5405;
      ProdOrderLine@1005 : Record 5406;
    BEGIN
      // [FEATURE] [Send-Ahead Quantity]
      // [SCENARIO 201467] It should be possible to refresh a production order with a parallel routing using send-ahead quantity when total order execution time is greater than MAXINT ms

      // [GIVEN] Parallel routing "R" with 2 operations, both using send-ahead quantity, setup time in operations is 10000
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Parallel);
      CreateRoutingLineOnNewWorkCenter(RoutingHeader,'100',10000,100,'200','');
      CreateRoutingLineOnNewWorkCenter(RoutingHeader,'200',10000,200,'','100');
      ChangeStatusOfProductionRoutingHeader(RoutingHeader,RoutingHeader.Status::Certified);

      // [GIVEN] Item "I" with routing "R"
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Routing No.",RoutingHeader."No.");
      Item.MODIFY(TRUE);

      // [GIVEN] Production order with item "I" as a source, "Quantity" = 10000
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ProductionOrder."Source Type"::Item,Item."No.",10000);

      // [WHEN] Refresh the production order
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);

      // [THEN] Order is successfully refreshed
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
      ProdOrderLine.TESTFIELD("Due Date",ProductionOrder."Due Date");
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      IF Initialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;
      NoSeriesSetup;
      CreateLocationSetup;
      ItemJournalSetup;
      ConsumptionJournalSetup;
      OutputJournalSetup;
      COMMIT;

      Initialized := TRUE
    END;

    LOCAL PROCEDURE NoSeriesSetup@74();
    VAR
      PurchasesPayablesSetup@1003 : Record 312;
      SalesReceivablesSetup@1002 : Record 311;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Receipt Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Invoice Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);

      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationSetup@26();
    BEGIN
      // Create Blue Location.
      LibraryWarehouse.CreateLocation(LocationBlue);

      // Create White Location.
      LibraryWarehouse.CreateFullWMSLocation(LocationWhite,2);  // Value used for number of bin per zone.

      // Create Green Location.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationGreen);
      LocationGreen.VALIDATE("Require Put-away",TRUE);
      LocationGreen.VALIDATE("Require Pick",TRUE);
      LocationGreen.VALIDATE("Require Receive",TRUE);
      LocationGreen.VALIDATE("Require Shipment",TRUE);
      LocationGreen.MODIFY(TRUE);

      // Create Silver Location.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationSilver);
      LocationSilver."Bin Mandatory" := TRUE;  // Skip Validate to improve performance.
      LocationSilver.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationWithProductionAndPick@235(VAR Location@1000 : Record 14);
    VAR
      Bin@1001 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Require Pick",TRUE);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY(TRUE);

      LibraryWarehouse.CreateBin(Bin,Location.Code,LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),'','');

      Location.VALIDATE("From-Production Bin Code",Bin.Code);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@50();
    BEGIN
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      UpdateNoSeriesOnItemJournalBatch(ItemJournalBatch,LibraryUtility.GetGlobalNoSeriesCode);
    END;

    LOCAL PROCEDURE ConsumptionJournalSetup@138();
    BEGIN
      ConsumptionItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ConsumptionItemJournalTemplate,ConsumptionItemJournalTemplate.Type::Consumption);

      ConsumptionItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(
        ConsumptionItemJournalBatch,ConsumptionItemJournalTemplate.Type,ConsumptionItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE OutputJournalSetup@59();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(OutputItemJournalTemplate,OutputItemJournalTemplate.Type::Output);
      LibraryInventory.SelectItemJournalBatchName(
        OutputItemJournalBatch,OutputItemJournalTemplate.Type,OutputItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateTrackedItem@43(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option;ReorderingPolicy@1002 : Option;IncludeInventory@1003 : Boolean;ReorderQuantity@1005 : Decimal;ItemTrackingCode@1004 : Code[10]);
    BEGIN
      LibraryInventory.CreateTrackedItem(
        Item,LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,ItemTrackingCode);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Reordering Policy",ReorderingPolicy);
      Item.VALIDATE("Include Inventory",IncludeInventory);
      Item.VALIDATE("Reorder Quantity",ReorderQuantity);
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLineWithTracking@125(ItemNo@1004 : Code[20];Quantity@1002 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
      ItemTrackingMode@1001 : ' ,Assign Lot No.,Select Entries,Verify Entries';
    BEGIN
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue for Page Handler.
      UpdateNoSeriesOnItemJournalBatch(ItemJournalBatch,'');  // Required for test when using Item Tracking.
      CreateItemJournalLine(ItemJournalLine,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Document No.",LibraryUtility.GenerateGUID);
      ItemJournalLine.MODIFY(TRUE);
      ItemJournalLine.OpenItemTrackingLines(FALSE);  // Assign Tracking on Page Handler.
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      UpdateNoSeriesOnItemJournalBatch(ItemJournalBatch,LibraryUtility.GetGlobalNoSeriesCode);
    END;

    LOCAL PROCEDURE CreateSalesOrder@18(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,'',ItemNo,Quantity,'',0D);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithLocation@213(VAR SalesLine@1000 : Record 37;LocationCode@1003 : Code[10];BinCode@1001 : Code[20]);
    VAR
      SalesHeader@1004 : Record 36;
      Item@1002 : Record 27;
    BEGIN
      CreateItem(Item,Item."Replenishment System"::"Prod. Order");
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine."Bin Code" := BinCode;
      SalesLine.MODIFY;
    END;

    LOCAL PROCEDURE CreateStockkeepingUnit@81(LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];ReplenishmentSystem@1003 : Option);
    VAR
      StockkeepingUnit@1000 : Record 5700;
    BEGIN
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,LocationCode,ItemNo,'');
      StockkeepingUnit.VALIDATE("Replenishment System",ReplenishmentSystem);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndRefreshReleasedProductionOrder@37(VAR ProductionOrder@1000 : Record 5405;SourceNo@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      // Create and Refresh Released Production Order.
      CreateAndRefreshProductionOrder(ProductionOrder,ProductionOrder.Status::Released,SourceNo,Quantity);
    END;

    LOCAL PROCEDURE CreateAndRefreshSimulatedProductionOrder@71(VAR ProductionOrder@1000 : Record 5405;SourceNo@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      // Create and Refresh Simulated Production Order.
      CreateAndRefreshProductionOrder(ProductionOrder,ProductionOrder.Status::Simulated,SourceNo,Quantity);
    END;

    LOCAL PROCEDURE CreateAndRefreshFirmPlannedProductionOrder@101(VAR ProductionOrder@1000 : Record 5405;SourceNo@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      // Create and Refresh Firm Planned Production Order.
      CreateAndRefreshProductionOrder(ProductionOrder,ProductionOrder.Status::"Firm Planned",SourceNo,Quantity);
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@63(VAR ProductionOrder@1002 : Record 5405;Status@1003 : Option;SourceNo@1001 : Code[20];Quantity@1000 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,ProductionOrder."Source Type"::Item,SourceNo,Quantity);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndRefreshReleasedProdOrderWithFlushedComponent@279(VAR ProductionOrder@1000 : Record 5405;ProdItemNo@1001 : Code[20];CompItemNo@1002 : Code[20]);
    VAR
      ProdOrderComponent@1004 : Record 5407;
      ProdOrderRoutingLine@1003 : Record 5409;
    BEGIN
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,ProdItemNo,LibraryRandom.RandInt(5));
      FindProdOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder."No.");
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",CompItemNo);
      ProdOrderComponent.VALIDATE("Flushing Method",ProdOrderComponent."Flushing Method"::Backward);
      ProdOrderComponent.VALIDATE("Routing Link Code",ProdOrderRoutingLine."Routing Link Code");
      ProdOrderComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostOutputJournal@42(ProductionOrderNo@1000 : Code[20]);
    BEGIN
      OutputJournalExplodeRouting(ProductionOrderNo);
      LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateProductionOrderOnLocationWithBin@207(VAR ProductionOrder@1001 : Record 5405;VAR ProdOrderLine@1002 : Record 5406);
    VAR
      Item@1000 : Record 27;
    BEGIN
      CreateProductionItemsSetupWithRoutingLinkCode(Item,'','');
      CreateAndRefreshReleasedProductionOrderWithLocation(ProductionOrder,Item."No.",LocationSilver.Code);
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
    END;

    LOCAL PROCEDURE CreateOutputJournalLine@197(VAR ItemJournalBatch@1002 : Record 233;ProdOrderLine@1000 : Record 5406;NewSetupTime@1001 : Decimal);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      LibraryPatterns.MAKEOutputJournalLine(ItemJournalBatch,ProdOrderLine,ProdOrderLine."Due Date",ProdOrderLine.Quantity,300);
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      WITH ItemJournalLine DO BEGIN
        VALIDATE("Item No.");
        VALIDATE("Setup Time",NewSetupTime);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateJournalLineLastOutput@211(VAR ItemJournalBatch@1002 : Record 233;ProdOrderLine@1003 : Record 5406;BinCode@1001 : Code[20]);
    VAR
      ItemJnlLine@1000 : Record 83;
    BEGIN
      CreateOutputJournalLine(ItemJournalBatch,ProdOrderLine,LibraryRandom.RandInt(100));

      ItemJnlLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJnlLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJnlLine.FINDFIRST;

      UpdateRoutingOperationOnOutputLine(ItemJnlLine,ProdOrderLine."Routing No.");

      ItemJnlLine.VALIDATE("Bin Code",BinCode);
      ItemJnlLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingLineOnNewWorkCenter@264(VAR RoutingHeader@1000 : Record 99000763;OperationNo@1002 : Code[10];SetupTime@1004 : Integer;SendAheadQty@1005 : Decimal;NextOperationNo@1006 : Code[30];PrevOperationNo@1007 : Code[30]);
    VAR
      WorkCenter@1001 : Record 99000754;
      RoutingLine@1003 : Record 99000764;
    BEGIN
      LibraryManufacturing.CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter,CALCDATE('<-2M>',WORKDATE),CALCDATE('<2M>',WORKDATE));

      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'',OperationNo,RoutingLine.Type::"Work Center",WorkCenter."No.");
      RoutingLine.VALIDATE("Setup Time",SetupTime);
      RoutingLine.VALIDATE("Send-Ahead Quantity",SendAheadQty);
      RoutingLine.VALIDATE("Next Operation No.",NextOperationNo);
      RoutingLine.VALIDATE("Previous Operation No.",PrevOperationNo);
      RoutingLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostProductionJournal@164(VAR ProductionOrder@1000 : Record 5405);
    VAR
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      LibraryVariableStorage.Enqueue(ProductionOrder."No."); // Enqueue value for PostProdJournalByPageHandler.
      LibraryVariableStorage.Enqueue(JournalLinePostedMsg); // Enqueue value for MessageHandler.
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
      ProductionJournalMgt.Handling(ProductionOrder,ProdOrderLine."Line No.");
    END;

    LOCAL PROCEDURE FindItemJournalLine@60(VAR ItemJournalLine@1000 : Record 83;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    BEGIN
      FilterOnItemJournalLine(ItemJournalLine,JournalTemplateName,JournalBatchName);
      ItemJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindProdOrderComponent@115(VAR ProdOrderComponent@1002 : Record 5407;Status@1003 : Option;ProdOrderNo@1001 : Code[20];ItemNo@1000 : Code[20]);
    BEGIN
      FilterOnProdOrderComponent(ProdOrderComponent,Status,ProdOrderNo,ItemNo);
      ProdOrderComponent.FINDFIRST;
    END;

    LOCAL PROCEDURE FindProdOrderComponentItem@226(VAR Item@1000 : Record 27;ProdOrderStatus@1001 : Option;ProdOrderNo@1002 : Code[20]);
    VAR
      ProdOrderComponent@1003 : Record 5407;
    BEGIN
      WITH ProdOrderComponent DO BEGIN
        SETRANGE(Status,ProdOrderStatus);
        SETRANGE("Prod. Order No.",ProdOrderNo);
        FINDFIRST;
        Item.GET("Item No.");
      END;
    END;

    LOCAL PROCEDURE FindProdOrderRoutingLine@246(VAR ProdOrderRoutingLine@1001 : Record 5409;ProdOrderNo@1000 : Code[20]);
    BEGIN
      ProdOrderRoutingLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderRoutingLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FilterOnProdOrderComponent@117(VAR ProdOrderComponent@1002 : Record 5407;Status@1003 : Option;ProdOrderNo@1001 : Code[20];ItemNo@1000 : Code[20]);
    BEGIN
      ProdOrderComponent.SETRANGE(Status,Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
    END;

    LOCAL PROCEDURE UpdateProductionBOMOnItem@54(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      Item.GET(Item."No.");  // Get updated instance of Item Record for avoid another user modified error.
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProductionBOMAndRecertify@77(ProductionBOMNo@1000 : Code[20];BaseUnitofMeasure@1001 : Code[10];ItemNo@1003 : Code[20]);
    VAR
      ProductionBOMLine@1002 : Record 99000772;
      ProductionBOMHeader@1004 : Record 99000771;
      ProductionBOMHeader2@1005 : Record 99000771;
    BEGIN
      // Create Child Production BOM with Status New and attached to Parent Production BOM and Recertify Parent BOM.
      ProductionBOMHeader.GET(ProductionBOMNo);
      CreateProductionBOM(ProductionBOMHeader2,ProductionBOMLine,BaseUnitofMeasure,ProductionBOMLine.Type::Item,ItemNo);
      ChangeStatusOfProductionBOM(ProductionBOMHeader,ProductionBOMHeader.Status::"Under Development");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::"Production BOM",ProductionBOMHeader2."No.",
        LibraryRandom.RandInt(5));
      ChangeStatusOfProductionBOM(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);
    END;

    LOCAL PROCEDURE UpdateNoSeriesOnItemJournalBatch@124(VAR ItemJournalBatch@1000 : Record 233;NoSeries@1001 : Code[10]);
    BEGIN
      ItemJournalBatch.VALIDATE("No. Series",NoSeries);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLocationCodeOnSalesLine@31(VAR SalesLine@1000 : Record 37;LocationCode@1001 : Code[10]);
    BEGIN
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProdBOMHeaderStatus@156(ProdBOMNo@1001 : Code[20];ProdBOMHeaderStatus@1002 : Option);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      ProductionBOMHeader.GET(ProdBOMNo);
      ProductionBOMHeader.VALIDATE(Status,ProdBOMHeaderStatus);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@146(VAR ItemJournalLine@1000 : Record 83;ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@2(VAR ProductionBOMHeader@1002 : Record 99000771;ItemNo@1003 : Code[20];BaseUnitOfMeasure@1000 : Code[10]);
    VAR
      ProductionBOMLine@1001 : Record 99000772;
    BEGIN
      CreateProductionBOM(ProductionBOMHeader,ProductionBOMLine,BaseUnitOfMeasure,ProductionBOMLine.Type::Item,ItemNo);
      ChangeStatusOfProductionBOM(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);
    END;

    LOCAL PROCEDURE CreateProductionBOM@17(VAR ProductionBOMHeader@1000 : Record 99000771;VAR ProductionBOMLine@1002 : Record 99000772;BaseUnitOfMeasure@1001 : Code[10];Type@1004 : Option;No@1003 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,BaseUnitOfMeasure);
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',Type,No,LibraryRandom.RandInt(5));
    END;

    LOCAL PROCEDURE ChangeStatusOfProductionBOM@23(VAR ProductionBOMHeader@1000 : Record 99000771;Status@1001 : Option);
    BEGIN
      ProductionBOMHeader.VALIDATE(Status,Status);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeStatusOfProductionRoutingHeader@129(VAR RoutingHeader@1002 : Record 99000763;Status@1001 : Option);
    BEGIN
      RoutingHeader.VALIDATE(Status,Status);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AssingTrackingOnProdOrderComponent@49(ProdOrderComponent@1004 : Record 5407);
    BEGIN
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue for Page Handler.
      LibraryVariableStorage.Enqueue(AvailabilityWarningsMsg);  // Enqueue for Confirm Handler.
      ProdOrderComponent.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE SetLotNoOnProdOrderComponent@245(ProdOrderComponent@1004 : Record 5407;LotNo@1000 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Set Lot No.");  // Enqueue for Page Handler.
      LibraryVariableStorage.Enqueue(LotNo);
      ProdOrderComponent.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE SelectRequisitionLine@64(VAR RequisitionLine@1000 : Record 246;No@1001 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.FINDSET;
    END;

    LOCAL PROCEDURE AcceptActionMessage@22(ItemNo@1001 : Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      SelectRequisitionLine(RequisitionLine,ItemNo);
      REPEAT
        RequisitionLine.VALIDATE("Accept Action Message",TRUE);
        RequisitionLine.MODIFY(TRUE);
      UNTIL RequisitionLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FindReservationEntry@12(VAR ReservationEntry@1002 : Record 337;ItemNo@1000 : Code[20];SourceType@1001 : Integer);
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Source Type",SourceType);
      ReservationEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseLine@33(VAR PurchaseLine@1000 : Record 39;No@1001 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("No.",No);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE AcceptActionMessageAndCarryOutActionMessagePlan@28(ItemNo@1000 : Code[20]);
    VAR
      RequisitionLine@1001 : Record 246;
    BEGIN
      AcceptActionMessage(ItemNo);
      SelectRequisitionLine(RequisitionLine,ItemNo);
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE CreateWorkCenter@53(VAR WorkCenter@1004 : Record 99000754;FromTime@1002 : Time;ToTime@1005 : Time);
    BEGIN
      LibraryManufacturing.CreateWorkCenterCustomTime(WorkCenter,FromTime,ToTime);
    END;

    LOCAL PROCEDURE CreateDimensionWithValue@19(VAR DimensionValue@1000 : Record 349);
    VAR
      Dimension@1001 : Record 348;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
    END;

    LOCAL PROCEDURE CreateDimensionValueForGlobalDimension@155(VAR DimensionValue@1000 : Record 349);
    VAR
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      LibraryDimension.CreateDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 1 Code");
    END;

    LOCAL PROCEDURE CreateItem@80(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithDimension@95(VAR Item@1000 : Record 27;VAR DimensionValue@1002 : Record 349;ReplenishmentSystem@1003 : Option);
    BEGIN
      CreateItem(Item,ReplenishmentSystem);

      // Update Dimension on Item.
      UpdateDimensionOnItem(Item,DimensionValue);
    END;

    LOCAL PROCEDURE CreateItemWithSKU@220(VAR SalesLine@1008 : Record 37);
    VAR
      Item@1007 : Record 27;
      SalesHeader@1006 : Record 36;
      StockkeepingUnit@1003 : Record 5700;
    BEGIN
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateStockkeepingUnit(LocationBlue.Code,Item."No.",StockkeepingUnit."Replenishment System"::"Prod. Order");
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));
      UpdateLocationCodeOnSalesLine(SalesLine,LocationBlue.Code);
      LibraryVariableStorage.Enqueue(FirmPlannedProdOrderCreatedTxt);  // Enqueue value for MessageHandler.
    END;

    LOCAL PROCEDURE CreateItemWithRouting@195() : Code[20];
    VAR
      Item@1000 : Record 27;
      RoutingHeader@1001 : Record 99000763;
      RoutingLink@1002 : Record 99000777;
    BEGIN
      CreateItem(Item,Item."Replenishment System"::"Prod. Order");
      LibraryManufacturing.CreateRoutingLink(RoutingLink);
      CreateAndUpdateRoutingSetup(RoutingHeader,RoutingLink.Code);
      Item.VALIDATE("Routing No.",RoutingHeader."No.");
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemWithRoutingAndWaitTime@259(VAR Item@1000 : Record 27;VAR WaitTime@1001 : Decimal);
    VAR
      WorkCenter@1007 : Record 99000754;
      RoutingHeader@1006 : Record 99000763;
      RoutingLine@1005 : Record 99000764;
    BEGIN
      WaitTime := LibraryRandom.RandInt(10);
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateWorkCenter(WorkCenter,000000T,160000T); // time values needed for test
      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter,CALCDATE('<-2D>',WORKDATE),CALCDATE('<2D>',WORKDATE));
      CreateWorkCenterRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.",0,0,WaitTime,0);
      ChangeStatusOfProductionRoutingHeader(RoutingHeader,RoutingHeader.Status::Certified);
      CreateItem(Item,Item."Replenishment System"::"Prod. Order");
      UpdateRoutingAndBOMOnItem(Item,'',RoutingHeader."No.");
    END;

    LOCAL PROCEDURE FindProductionOrderLine@39(VAR ProdOrderLine@1000 : Record 5406;Status@1001 : Option;ProdOrderNo@1002 : Code[20]);
    BEGIN
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateBinCodeOnItemJournalLine@222(JnlTemplateName@1001 : Code[10];JnlBatchName@1002 : Code[10];BinCode@1003 : Code[20]);
    VAR
      ItemJnlLine@1000 : Record 83;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        SETRANGE("Journal Template Name",JnlTemplateName);
        SETRANGE("Journal Batch Name",JnlBatchName);
        IF FINDSET THEN
          REPEAT
            VALIDATE("Bin Code",BinCode);
            MODIFY(TRUE);
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateDefaultDimensionOnItem@249(VAR DimensionValue@1001 : Record 349;DimensionCode@1003 : Code[20];ItemNo@1002 : Code[20]);
    VAR
      DefaultDimension@1000 : Record 352;
    BEGIN
      LibraryDimension.CreateDimensionValue(DimensionValue,DimensionCode);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,ItemNo,DimensionCode,DimensionValue.Code);
    END;

    LOCAL PROCEDURE UpdateDimensionOnItem@152(VAR Item@1001 : Record 27;VAR DimensionValue@1000 : Record 349);
    VAR
      DefaultDimension@1003 : Record 352;
    BEGIN
      CreateDimensionValueForGlobalDimension(DimensionValue);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::Item,Item."No.",DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE UpdateDimensionOnProductionOrderLine@47(VAR DimensionValue@1004 : Record 349;ProductionOrder@1002 : Record 5405);
    VAR
      ProdOrderLine@1001 : Record 5406;
      DimensionSetID@1003 : Integer;
    BEGIN
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
      DimensionSetID := CreateDimensionWithDimensionSetID(DimensionValue,ProdOrderLine."Dimension Set ID");
      ProdOrderLine.VALIDATE("Dimension Set ID",DimensionSetID);
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDimensionOnProdOrderComponent@56(VAR DimensionValue@1000 : Record 349;ProductionOrder@1001 : Record 5405;ItemNo@1003 : Code[20]);
    VAR
      ProdOrderComponent@1002 : Record 5407;
      DimensionSetID@1005 : Integer;
    BEGIN
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",ItemNo);
      DimensionSetID := CreateDimensionWithDimensionSetID(DimensionValue,ProdOrderComponent."Dimension Set ID");
      ProdOrderComponent.VALIDATE("Dimension Set ID",DimensionSetID);
      ProdOrderComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGlobalDimensionOnWorkCenter@16(VAR DimensionValue@1001 : Record 349;WorkCenter@1002 : Record 99000754);
    BEGIN
      CreateDimensionValueForGlobalDimension(DimensionValue);
      WorkCenter.VALIDATE("Global Dimension 1 Code",DimensionValue.Code);
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGlobalDimensionByProductionOrderLine@177(VAR DimensionValue@1004 : Record 349;ProductionOrder@1002 : Record 5405);
    VAR
      ProdOrderLine@1001 : Record 5406;
    BEGIN
      CreateDimensionValueForGlobalDimension(DimensionValue);
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
      ProdOrderLine.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGlobalDimensionByShowDimensionsOnLine@189(VAR DimensionValue@1004 : Record 349;ProductionOrder@1002 : Record 5405);
    VAR
      ProdOrderLine@1001 : Record 5406;
    BEGIN
      CreateDimensionValueForGlobalDimension(DimensionValue);
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
      LibraryVariableStorage.Enqueue(DimensionValue.Code);
      ProdOrderLine.ShowDimensions;
    END;

    LOCAL PROCEDURE UpdateGlobalDimensionByProductionOrder@184(VAR DimensionValue@1004 : Record 349;ProductionOrder@1002 : Record 5405);
    BEGIN
      CreateDimensionValueForGlobalDimension(DimensionValue);
      ProductionOrder.GET(ProductionOrder.Status,ProductionOrder."No.");
      ProductionOrder.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);
      ProductionOrder.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRoutingOperationOnOutputLine@212(VAR ItemJnlLine@1001 : Record 83;RoutingNo@1002 : Code[20]);
    VAR
      RoutingLine@1000 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      RoutingLine.FINDLAST;

      ItemJnlLine.VALIDATE(Type,RoutingLine.Type);
      ItemJnlLine.VALIDATE("No.",RoutingLine."No.");
      ItemJnlLine.VALIDATE("Operation No.",RoutingLine."Operation No.");
      ItemJnlLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProductionItemWithDimensionSetup@92(VAR Item@1000 : Record 27;VAR Item2@1001 : Record 27;VAR DimensionValue@1002 : Record 349;VAR DimensionValue2@1003 : Record 349);
    VAR
      ProductionBOMHeader@1004 : Record 99000771;
    BEGIN
      CreateItemWithDimension(Item,DimensionValue,Item."Replenishment System"::"Prod. Order");
      CreateItemWithDimension(Item2,DimensionValue2,Item."Replenishment System"::Purchase);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item2."No.",Item."Base Unit of Measure");
      UpdateProductionBOMOnItem(Item,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateItemAndReleasedProdOrderWithDimAndRouting@180(VAR ParentItem@1001 : Record 27;VAR ProductionOrder@1004 : Record 5405;VAR ComponentItemNo@1000 : Code[20]);
    VAR
      DimensionValue@1002 : Record 349;
    BEGIN
      ComponentItemNo := CreateProductionItemsSetupWithRouting(ParentItem);
      UpdateDimensionOnItem(ParentItem,DimensionValue);
      CreateAndPostItemJournalLine(ComponentItemNo);
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,ParentItem."No.",LibraryRandom.RandDec(2,2));
    END;

    LOCAL PROCEDURE CreateItemAndReleasedProdOrderWithDim@173(VAR ParentItem@1001 : Record 27;VAR ProductionOrder@1004 : Record 5405);
    VAR
      ComponentItem@1000 : Record 27;
      DimensionValue@1002 : Record 349;
      DimensionValue2@1003 : Record 349;
    BEGIN
      CreateProductionItemWithDimensionSetup(ParentItem,ComponentItem,DimensionValue,DimensionValue2);
      CreateAndPostItemJournalLine(ComponentItem."No.");
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,ParentItem."No.",LibraryRandom.RandDec(2,2));
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@121(ItemNo@1001 : Code[20]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,ItemNo,LibraryRandom.RandDec(10,2) + 10);  // Using Large Random Value.
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateConsumptionJournal@131(ProductionOrderNo@1000 : Code[20]);
    BEGIN
      LibraryInventory.ClearItemJournal(ConsumptionItemJournalTemplate,ConsumptionItemJournalBatch);
      LibraryManufacturing.CalculateConsumption(
        ProductionOrderNo,ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostProdJournalWithLocation@186(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];OutputQty@1002 : Decimal;SetupTime@1003 : Decimal) : Code[20];
    VAR
      ProductionOrder@1005 : Record 5405;
      ProdOrderLine@1006 : Record 5406;
    BEGIN
      CreateAndRefreshReleasedProductionOrderWithLocation(ProductionOrder,ItemNo,LocationCode);
      // Enqueue variables for PostUpdatedProdJournalPageHandler
      LibraryVariableStorage.Enqueue(OutputQty);
      LibraryVariableStorage.Enqueue(SetupTime);
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
      ProductionJournalMgt.Handling(ProductionOrder,ProdOrderLine."Line No.");
      EXIT(ProductionOrder."No.");
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@149(VAR ItemLedgerEntry@1002 : Record 32;OrderNo@1001 : Code[20];ItemNo@1000 : Code[20];EntryType@1003 : Option);
    BEGIN
      ItemLedgerEntry.SETRANGE("Order Type",ItemLedgerEntry."Order Type"::Production);
      ItemLedgerEntry.SETRANGE("Order No.",OrderNo);
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindValueEntry@157(VAR ValueEntry@1002 : Record 5802;ILEType@1003 : Option;OrderNo@1001 : Code[20];ItemNo@1000 : Code[20]);
    BEGIN
      WITH ValueEntry DO BEGIN
        SETRANGE("Order Type","Order Type"::Production);
        SETRANGE("Order No.",OrderNo);
        SETRANGE("Item Ledger Entry Type",ILEType);
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE CreateDimensionWithDimensionSetID@9(VAR DimensionValue@1000 : Record 349;DimensionSetID@1002 : Integer) : Integer;
    VAR
      DimensionSetEntry@1001 : Record 480;
    BEGIN
      CreateDimensionWithValue(DimensionValue);
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,DimensionSetID);
      EXIT(LibraryDimension.CreateDimSet(DimensionSetEntry."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code));
    END;

    LOCAL PROCEDURE AreSameMessages@7(Message@1001 : Text[1024];Message2@1000 : Text[1024]) : Boolean;
    BEGIN
      EXIT(STRPOS(Message,Message2) > 0);
    END;

    LOCAL PROCEDURE DequeueText@21() : Text[1024];
    VAR
      ExpectedValue@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedValue);  // Dequeue Code or Text type variable.
      EXIT(FORMAT(ExpectedValue));
    END;

    LOCAL PROCEDURE DequeueNumber@72() : Decimal;
    VAR
      ExpectedValue@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedValue);  // Dequeue Integer or Decimal type variable.
      EXIT(ExpectedValue);
    END;

    LOCAL PROCEDURE CreateAndOpenReleasedProductionOrder@40(VAR ReleasedProductionOrder@1002 : TestPage 99000831;ItemNo@1001 : Code[20]);
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,ItemNo,LibraryRandom.RandDec(10,2));
      ReleasedProductionOrder.OPENEDIT;
      ReleasedProductionOrder.FILTER.SETFILTER("No.",ProductionOrder."No.");
    END;

    LOCAL PROCEDURE PostConsumptionJournalLine@231(VAR ProdOrderLine@1000 : Record 5406;Item@1001 : Record 27;PostingDate@1002 : Date;LocationCode@1003 : Code[10];BinCode@1004 : Code[20];Qty@1005 : Decimal);
    BEGIN
      MakeConsumptionJournalLine(ProdOrderLine,Item,PostingDate,LocationCode,BinCode,Qty);
      LibraryInventory.PostItemJournalBatch(ConsumptionItemJournalBatch);
    END;

    LOCAL PROCEDURE ReservationFromSalesOrder@105(SalesLine@1001 : Record 37;TotalQuantity@1003 : Decimal;TotalReservedQuantity@1004 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(FALSE);  // Reserve From Current Line as False. Enqueue Value for Page Handler.
      ReservationFromSalesOrderCurrentLine(SalesLine,TotalQuantity,TotalReservedQuantity);
    END;

    LOCAL PROCEDURE ReservationFromSalesOrderCurrentLine@84(SalesLine@1001 : Record 37;TotalQuantity@1003 : Decimal;TotalReservedQuantity@1004 : Decimal);
    BEGIN
      // Enqueue Value for Page Handler for verification.
      LibraryVariableStorage.Enqueue(SalesLine.Quantity);  // Qty To Reserve on Reservation Page.
      LibraryVariableStorage.Enqueue(0);  // Qty Reserved on Reservation Page.
      LibraryVariableStorage.Enqueue(SalesLine.Quantity);  // Unreserved Quantity on Reservation Page.
      LibraryVariableStorage.Enqueue(TotalQuantity);  // Total Quantity on Reservation Page.
      LibraryVariableStorage.Enqueue(TotalReservedQuantity);  // Total Quantity and Total Reserved Quantity on Reservation Page.
      SalesLine.ShowReservation;  // Open Reservation Page on Page Handler.
    END;

    LOCAL PROCEDURE CreateProductionItemSetup@58(VAR Item@1000 : Record 27) : Code[20];
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
      Item2@1001 : Record 27;
    BEGIN
      CreateItem(Item,Item."Replenishment System"::"Prod. Order");
      CreateItem(Item2,Item2."Replenishment System"::Purchase);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item2."No.",Item."Base Unit of Measure");
      UpdateProductionBOMOnItem(Item,ProductionBOMHeader."No.");
      EXIT(Item2."No.");
    END;

    LOCAL PROCEDURE UpdateVariantCodeOnSalesLine@97(VAR SalesLine@1001 : Record 37;VariantCode@1000 : Code[10]);
    BEGIN
      SalesLine.VALIDATE("Variant Code",VariantCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVariantCodeOnProdOrderLine@106(ProductionOrder@1000 : Record 5405;VariantCode@1002 : Code[10]);
    VAR
      ProdOrderLine@1001 : Record 5406;
    BEGIN
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
      ProdOrderLine.VALIDATE("Variant Code",VariantCode);
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateShipmentDateOnSalesLine@114(VAR SalesLine@1000 : Record 37);
    BEGIN
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@132(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrder@136(VAR PurchaseHeader@1003 : Record 38;VAR PurchaseLine@1002 : Record 39;ItemNo@1001 : Code[20];Quantity@1000 : Decimal);
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,ItemNo,Quantity);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithVariantCode@174(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];VariantCode@1004 : Code[10];Quantity@1003 : Decimal);
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,Quantity);
      UpdateVariantCodeOnSalesLine(SalesLine,VariantCode);
    END;

    LOCAL PROCEDURE OpenSalesOrderPlanning@135(No@1001 : Code[20]);
    VAR
      SalesOrderPlanning@1000 : Page 99000883;
    BEGIN
      // Open Sales Order Planning page for required Sales Order.
      SalesOrderPlanning.SetSalesOrder(No);
      SalesOrderPlanning.RUNMODAL;
    END;

    LOCAL PROCEDURE OutputJournalExplodeRouting@1106(ProductionOrderNo@1000 : Code[20]);
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(OutputItemJournalTemplate,OutputItemJournalBatch);
      LibraryManufacturing.CreateOutputJournal(ItemJournalLine,OutputItemJournalTemplate,OutputItemJournalBatch,'',ProductionOrderNo);
      LibraryInventory.OutputJnlExplRoute(ItemJournalLine);
    END;

    LOCAL PROCEDURE UpdateFlushingMethodOnItem@93(VAR Item@1000 : Record 27;FlushingMethod@1001 : Option);
    BEGIN
      Item.VALIDATE("Flushing Method",FlushingMethod);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateFlushingMethodOnProdOrderComponent@209(ProdOrderStatus@1001 : Option;ProdOrderNo@1000 : Code[20]);
    VAR
      ProdOrderComponent@1003 : Record 5407;
    BEGIN
      WITH ProdOrderComponent DO BEGIN
        SETRANGE(Status,ProdOrderStatus);
        SETRANGE("Prod. Order No.",ProdOrderNo);
        IF FINDSET THEN
          REPEAT
            VALIDATE("Flushing Method","Flushing Method"::Forward);
            MODIFY(TRUE);
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE TrackingOnProdOrderComponent@103(ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20]);
    VAR
      ProdOrderComponent@1002 : Record 5407;
      ItemTrackingMode@1003 : ' ,Assign Lot No.,Select Entries,Verify Entries';
    BEGIN
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",ItemNo);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue value for ItemTrackingMode On Page Handler - LotItemTrackingPageHandler.
      ProdOrderComponent.OpenItemTrackingLines;  // Open Page for Select Tracking Entries.
    END;

    LOCAL PROCEDURE AssignTrackingOnProdOrderLine@89(VAR ProdOrderLine@1000 : Record 5406;Status@1001 : Option;ProductionOrderNo@1002 : Code[20]);
    BEGIN
      FindProductionOrderLine(ProdOrderLine,Status,ProductionOrderNo);
      LibraryVariableStorage.Enqueue(TRUE);  // Enqueue value AssignSerialNo as True for Page Handler - SerialItemTrackingPageHandler.
      ProdOrderLine.OpenItemTrackingLines;  // Open Page for Assign Tracking.
    END;

    LOCAL PROCEDURE CreateSalesOrderWithTrackedItemSetup@113(VAR SalesLine@1003 : Record 37);
    VAR
      ItemTrackingCode@1000 : Record 6502;
      Item@1001 : Record 27;
      SalesHeader@1002 : Record 36;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,TRUE,FALSE);
      CreateTrackedItem(
        Item,Item."Replenishment System"::"Prod. Order",Item."Reordering Policy"::"Lot-for-Lot",TRUE,0,ItemTrackingCode.Code);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandInt(10));  // Using Quantity as Random integer for Serial No.
    END;

    LOCAL PROCEDURE CreateSalesOrderWithLotTrackedItemSetup@229(VAR SalesLine@1003 : Record 37);
    VAR
      ItemTrackingCode@1000 : Record 6502;
      Item@1001 : Record 27;
      SalesHeader@1002 : Record 36;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateTrackedItem(
        Item,Item."Replenishment System"::"Prod. Order",Item."Reordering Policy"::"Fixed Reorder Qty.",TRUE,0,ItemTrackingCode.Code);

      LibraryVariableStorage.Enqueue(WillNotAffectExistingEntriesTxt); // for MessageHandler
      WITH Item DO BEGIN
        VALIDATE("Manufacturing Policy","Manufacturing Policy"::"Make-to-Stock");
        VALIDATE(Reserve,Reserve::Never);
        VALIDATE("Order Tracking Policy","Order Tracking Policy"::"Tracking & Action Msg.");
        MODIFY(TRUE);
      END;

      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandInt(10));  // Using Quantity as Random integer for Serial No.
    END;

    LOCAL PROCEDURE CreateClosedProductionBOM@267(VAR ProductionBOMHeader@1000 : Record 99000771;VAR ParentItem@1001 : Record 27);
    VAR
      ChildItem@1002 : Record 27;
    BEGIN
      ChildItem.GET(CreateProductionItemSetup(ParentItem));
      ProductionBOMHeader.GET(ParentItem."Production BOM No.");
      ChangeStatusOfProductionBOM(ProductionBOMHeader,ProductionBOMHeader.Status::Closed);
    END;

    LOCAL PROCEDURE CreateProductionBOMVersionWithNewItem@269(VAR Item@1001 : Record 27;ProductionBOMHeader@1002 : Record 99000771;VersionStatus@1003 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateProductionBOMVersionAndUpdateStatus(ProductionBOMHeader,Item."No.",VersionStatus);
    END;

    LOCAL PROCEDURE CreateProductionBOMVersionAndUpdateStatus@104(ProductionBOMHeader@1001 : Record 99000771;ItemNo@1003 : Code[20];ProdBOMVersionStatus@1004 : Option) : Code[20];
    VAR
      ProductionBOMVersion@1000 : Record 99000779;
      ProductionBOMLine@1002 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMVersion(
        ProductionBOMVersion,ProductionBOMHeader."No.",FORMAT(LibraryRandom.RandInt(10)),
        ProductionBOMHeader."Unit of Measure Code");  // Use Random Version Code.
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,ProductionBOMVersion."Version Code",ProductionBOMLine.Type::Item,ItemNo,
        LibraryRandom.RandDec(5,2));
      ProductionBOMVersion.VALIDATE(Status,ProdBOMVersionStatus);
      ProductionBOMVersion.MODIFY(TRUE);
      EXIT(ProductionBOMVersion."Version Code");
    END;

    LOCAL PROCEDURE OpenProdBOMWhereUsedPage@126(VAR ProdBOMWhereUsed2@1001 : TestPage 99000811;Item@1000 : Record 27);
    VAR
      ProdBOMWhereUsed@1002 : Page 99000811;
    BEGIN
      // Open Production BOM Where Used page.
      ProdBOMWhereUsed2.TRAP;
      ProdBOMWhereUsed.SetItem(Item,WORKDATE);
      ProdBOMWhereUsed.RUN;
    END;

    LOCAL PROCEDURE CreateAndRefreshReleasedProductionOrderWithLocation@112(VAR ProductionOrder@1000 : Record 5405;SourceNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,SourceNo,
        LibraryRandom.RandDec(10,2));
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateRelProdOrder@252(VAR ProductionOrder@1000 : Record 5405);
    BEGIN
      WITH ProductionOrder DO BEGIN
        Status := Status::Released;
        "No." := LibraryUtility.GenerateGUID;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateRelProdOrderWithDateTime@258(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];EndingDate@1002 : Date;DueDate@1003 : Date);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,1);
      ProductionOrder.VALIDATE("Ending Time",000000T);
      ProductionOrder.VALIDATE("Ending Date",EndingDate);
      ProductionOrder.VALIDATE("Due Date",DueDate);
      ProductionOrder.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProdOrderComp@266(VAR ProdOrderComponent@1000 : Record 5407;ProdOrderNo@1001 : Code[20];SuppliedByLineNo@1003 : Integer;CompletelyPicked@1002 : Boolean);
    BEGIN
      WITH ProdOrderComponent DO BEGIN
        Status := Status::Released;
        "Prod. Order No." := ProdOrderNo;
        "Completely Picked" := CompletelyPicked;
        "Supplied-by Line No." := SuppliedByLineNo;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateRoutingSetup@66(VAR RoutingHeader@1001 : Record 99000763;RoutingLinkCode@1002 : Code[10];RoutingLinkCode2@1003 : Code[10]);
    VAR
      WorkCenter@1000 : Record 99000754;
      MachineCenter@1004 : Record 99000758;
      RoutingLine@1006 : Record 99000764;
    BEGIN
      CreateWorkCenter(WorkCenter,080000T,160000T);
      LibraryManufacturing.CreateMachineCenter(MachineCenter,WorkCenter."No.",LibraryRandom.RandDec(100,2));
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,RoutingLine.Type::"Machine Center",MachineCenter."No.",RoutingLinkCode);
      CreateRoutingLine(RoutingLine,RoutingHeader,RoutingLine.Type::"Work Center",WorkCenter."No.",RoutingLinkCode2);
      ChangeStatusOfProductionRoutingHeader(RoutingHeader,RoutingHeader.Status::Certified);
    END;

    LOCAL PROCEDURE CreateAndUpdateRoutingSetup@133(VAR RoutingHeader@1001 : Record 99000763;RoutingLinkCode@1002 : Code[10]);
    VAR
      WorkCenter@1000 : Record 99000754;
      RoutingLine@1006 : Record 99000764;
    BEGIN
      CreateWorkCenter(WorkCenter,080000T,160000T);
      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter,CALCDATE('<-2M>',WORKDATE),CALCDATE('<2M>',WORKDATE));
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,RoutingLine.Type::"Work Center",WorkCenter."No.",RoutingLinkCode);
      UpdateRoutingLineSetup(RoutingLine,LibraryRandom.RandInt(10),LibraryRandom.RandInt(10));
      ChangeStatusOfProductionRoutingHeader(RoutingHeader,RoutingHeader.Status::Certified);
    END;

    LOCAL PROCEDURE CreateTwoMachineCenters@244(VAR MachineCenter1@1000 : Record 99000758;VAR MachineCenter2@1001 : Record 99000758);
    VAR
      WorkCenter@1002 : Record 99000754;
      CapacityConstrainedResource@1003 : Record 99000866;
    BEGIN
      CreateWorkCenter(WorkCenter,080000T,160000T);
      LibraryManufacturing.CreateMachineCenter(MachineCenter1,WorkCenter."No.",LibraryRandom.RandInt(10));
      LibraryManufacturing.CalculateMachCenterCalendar(MachineCenter1,CALCDATE('<-6M>',WORKDATE),CALCDATE('<6M>',WORKDATE));
      LibraryManufacturing.CreateMachineCenter(MachineCenter2,WorkCenter."No.",LibraryRandom.RandInt(10));
      LibraryManufacturing.CalculateMachCenterCalendar(MachineCenter2,CALCDATE('<-6M>',WORKDATE),CALCDATE('<6M>',WORKDATE));
      WITH CapacityConstrainedResource DO BEGIN
        LibraryManufacturing.CreateCapacityConstrainedResource(
          CapacityConstrainedResource,"Capacity Type"::"Machine Center",MachineCenter2."No.");
        VALIDATE("Critical Load %",LibraryRandom.RandDec(100,2));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateRoutingLineWithTimes@250(VAR RoutingHeader@1001 : Record 99000763;MachineCenterNo@1002 : Code[20];RunTime@1004 : Decimal;WaitTime@1008 : Decimal;SendAheadQty@1009 : Decimal);
    VAR
      RoutingLine@1000 : Record 99000764;
    BEGIN
      CreateRoutingLine(RoutingLine,RoutingHeader,RoutingLine.Type::"Machine Center",MachineCenterNo,'');
      UpdateRoutingLine(RoutingLine,0,RunTime,WaitTime,0);
      RoutingLine.VALIDATE("Send-Ahead Quantity",SendAheadQty);
      RoutingLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingHeaderWithTwoLines@230(MachineCenterNo1@1006 : Code[20];MachineCenterNo2@1007 : Code[20];RunTime1@1005 : Decimal;RunTime2@1004 : Decimal;WaitTime1@1003 : Decimal;WaitTime2@1002 : Decimal;SendAheadQty1@1001 : Decimal;SendAheadQty2@1000 : Decimal) : Code[20];
    VAR
      RoutingHeader@1008 : Record 99000763;
    BEGIN
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLineWithTimes(RoutingHeader,MachineCenterNo1,RunTime1,WaitTime1,SendAheadQty1);
      CreateRoutingLineWithTimes(RoutingHeader,MachineCenterNo2,RunTime2,WaitTime2,SendAheadQty2);
      ChangeStatusOfProductionRoutingHeader(RoutingHeader,RoutingHeader.Status::Certified);
      EXIT(RoutingHeader."No.");
    END;

    LOCAL PROCEDURE MakeConsumptionJournalLine@223(VAR ProdOrderLine@1001 : Record 5406;Item@1002 : Record 27;PostingDate@1003 : Date;LocationCode@1004 : Code[10];BinCode@1005 : Code[20];Qty@1006 : Decimal);
    BEGIN
      LibraryPatterns.MAKEConsumptionJournalLine(
        ConsumptionItemJournalBatch,ProdOrderLine,Item,PostingDate,LocationCode,'',Qty,LibraryRandom.RandDec(1000,2));
      UpdateBinCodeOnItemJournalLine(ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name,BinCode);
    END;

    LOCAL PROCEDURE UpdateRoutingLineSetup@150(VAR RoutingLine@1003 : Record 99000764;SetupTime@1007 : Decimal;RunTime@1005 : Decimal);
    BEGIN
      RoutingLine.VALIDATE("Setup Time",SetupTime);
      RoutingLine.VALIDATE("Run Time",RunTime);
      RoutingLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRoutingAndBOMOnItem@139(VAR Item@1003 : Record 27;ProdBOMHeaderNo@1007 : Code[20];RoutingNo@1005 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProdBOMHeaderNo);
      Item.VALIDATE("Routing No.",RoutingNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRoutingLine@228(VAR RoutingLine@1003 : Record 99000764;SetupTime@1007 : Decimal;RunTime@1005 : Decimal;WaitTime@1000 : Decimal;MoveTime@1001 : Decimal);
    BEGIN
      WITH RoutingLine DO BEGIN
        VALIDATE("Setup Time",SetupTime);
        VALIDATE("Run Time",RunTime);
        VALIDATE("Wait Time",WaitTime);
        VALIDATE("Move Time",MoveTime);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateRoutingLine@73(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;Type@1004 : Option;No@1002 : Code[20];RoutingLinkCode@1006 : Code[10]);
    VAR
      OperationNo@1001 : Code[10];
    BEGIN
      // Random used such that the Next Operation No is greater than the Previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));

      LibraryManufacturing.CreateRoutingLine(RoutingHeader,RoutingLine,'',OperationNo,Type,No);
      RoutingLine.VALIDATE("Routing Link Code",RoutingLinkCode);
      RoutingLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWorkCenterRoutingLine@237(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;WorkCenterNo@1002 : Code[20];SetupTime@1004 : Decimal;RunTime@1005 : Decimal;WaitTime@1006 : Decimal;MoveTime@1007 : Decimal);
    BEGIN
      CreateRoutingLine(RoutingLine,RoutingHeader,RoutingLine.Type::"Work Center",WorkCenterNo,'');
      UpdateRoutingLine(RoutingLine,SetupTime,RunTime,WaitTime,MoveTime);
    END;

    LOCAL PROCEDURE FindLastOperationNo@83(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
      EXIT('');
    END;

    LOCAL PROCEDURE FindProdOrderBySourceNo@205(VAR ProdOrder@1000 : Record 5405;SalesLineDocumentNo@1001 : Code[20]);
    BEGIN
      WITH ProdOrder DO BEGIN
        SETCURRENTKEY("Source No.");
        SETRANGE("Source No.",SalesLineDocumentNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE CreateProductionBOMLineWithRoutingLinkCode@134(ProductionBOMHeader@1001 : Record 99000771;ItemNo@1002 : Code[20];RoutingLinkCode@1003 : Code[10]);
    VAR
      ProductionBOMLine@1000 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo,1);  // Quantity per as 1.
      ProductionBOMLine.VALIDATE("Routing Link Code",RoutingLinkCode);
      ProductionBOMLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOMWithRoutingLinkCode@159(VAR ProductionBOMHeader@1000 : Record 99000771;BaseUnitOfMeasure@1001 : Code[10];ItemNo@1002 : Code[20];RoutingLinkCode@1003 : Code[10];RoutingLinkCode2@1004 : Code[10]);
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,BaseUnitOfMeasure);
      CreateProductionBOMLineWithRoutingLinkCode(ProductionBOMHeader,ItemNo,RoutingLinkCode);
      CreateProductionBOMLineWithRoutingLinkCode(ProductionBOMHeader,ItemNo,RoutingLinkCode2);
      ChangeStatusOfProductionBOM(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);
    END;

    LOCAL PROCEDURE DeleteItemJournalLineForTypeMachineCenter@176();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      FilterOnItemJournalLine(ItemJournalLine,OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
      ItemJournalLine.SETRANGE(Type,ItemJournalLine.Type::"Machine Center");
      ItemJournalLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE CreateProductionItemsSetupWithRoutingLinkCode@187(VAR Item@1000 : Record 27;RoutingLinkCode@1003 : Code[10];RoutingLinkCode2@1004 : Code[10]) : Code[20];
    VAR
      Item2@1001 : Record 27;
      RoutingHeader@1002 : Record 99000763;
      ProductionBOMHeader@1005 : Record 99000771;
    BEGIN
      CreateItem(Item,Item."Replenishment System"::"Prod. Order");
      CreateItem(Item2,Item2."Replenishment System"::"Prod. Order");
      UpdateFlushingMethodOnItem(Item2,Item2."Flushing Method"::Backward);
      CreateRoutingSetup(RoutingHeader,RoutingLinkCode,RoutingLinkCode2);
      CreateAndCertifyProductionBOMWithRoutingLinkCode(
        ProductionBOMHeader,Item."Base Unit of Measure",Item2."No.",RoutingLinkCode,RoutingLinkCode2);
      UpdateRoutingAndBOMOnItem(Item,ProductionBOMHeader."No.",RoutingHeader."No.");
      EXIT(Item2."No.");
    END;

    LOCAL PROCEDURE CreateProductionItemsSetupWithRouting@137(VAR Item@1000 : Record 27) : Code[20];
    VAR
      Item2@1001 : Record 27;
      ProductionBOMHeader@1005 : Record 99000771;
      RoutingHeader@1002 : Record 99000763;
      RoutingLink@1003 : Record 99000777;
    BEGIN
      CreateItem(Item,Item."Replenishment System"::"Prod. Order");
      CreateItem(Item2,Item2."Replenishment System"::Purchase);
      LibraryManufacturing.CreateRoutingLink(RoutingLink);
      CreateAndUpdateRoutingSetup(RoutingHeader,RoutingLink.Code);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item2."No.",Item2."Base Unit of Measure");
      UpdateRoutingAndBOMOnItem(Item,ProductionBOMHeader."No.",RoutingHeader."No.");
      EXIT(Item2."No.");
    END;

    LOCAL PROCEDURE FindProdOrderComponentForRoutingLinkCode@120(VAR ProdOrderComponent@1003 : Record 5407;Status@1002 : Option;ProdOrderNo@1001 : Code[20];ItemNo@1000 : Code[20];RoutingLinkCode@1004 : Code[10]);
    BEGIN
      FilterOnProdOrderComponent(ProdOrderComponent,Status,ProdOrderNo,ItemNo);
      ProdOrderComponent.SETRANGE("Routing Link Code",RoutingLinkCode);
      ProdOrderComponent.FINDFIRST;
    END;

    LOCAL PROCEDURE FilterOnItemJournalLine@175(VAR ItemJournalLine@1000 : Record 83;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
    END;

    LOCAL PROCEDURE CreateItemUnitOfMeasure@91(VAR ItemUnitOfMeasure@1002 : Record 5404;ItemNo@1000 : Code[20]);
    BEGIN
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,ItemNo,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOMWithDiffUnitOfMeasureCode@147(VAR ProductionBOMHeader@1000 : Record 99000771;BaseUnitOfMeasure@1002 : Code[10];ItemNo@1003 : Code[20];UnitOfMeasureCode@1004 : Code[10]);
    VAR
      ProductionBOMLine@1001 : Record 99000772;
    BEGIN
      CreateProductionBOM(ProductionBOMHeader,ProductionBOMLine,BaseUnitOfMeasure,ProductionBOMLine.Type::Item,ItemNo);
      ProductionBOMLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      ProductionBOMLine.MODIFY(TRUE);
      ChangeStatusOfProductionBOM(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithItemTracking@158(ItemNo@1000 : Code[20]);
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      ItemTrackingMode@1001 : ' ,Assign Lot No.,Select Entries,Verify Entries';
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,ItemNo,LibraryRandom.RandDec(10,2) + 50);  // Using Large Quantity Value.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue for Page Handler - LotItemTrackingPageHandler.
      PurchaseLine.OpenItemTrackingLines;
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdatePurchUnitOfMeasureOnItem@140(VAR Item@1001 : Record 27);
    VAR
      ItemUnitOfMeasure@1000 : Record 5404;
    BEGIN
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");
      Item.VALIDATE("Purch. Unit of Measure",ItemUnitOfMeasure.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindAssignedLotNo@233(ItemNo@1000 : Code[20]) : Code[20];
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDLAST;
        EXIT("Lot No.");
      END;
    END;

    LOCAL PROCEDURE SetupPostProductionJournal@238(ProductionOrder@1000 : Record 5405;LineNo@1001 : Integer;LotNo@1002 : Code[20];QuantityToPost@1003 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Set Quantity & Lot No."); // Enqueued for ItemJournalLinesPageHandler.
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(QuantityToPost);
      ProductionJournalMgt.Handling(ProductionOrder,LineNo);
    END;

    LOCAL PROCEDURE UpdateTrackingCodeOnItem@277(VAR Item@1000 : Record 27);
    VAR
      ItemTrackingCode@1001 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode.Code);
      Item.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemTrackingOnProdOrderComponent@288(ProductionOrder@1001 : Record 5405;CompItemNo@1002 : Code[20]);
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",CompItemNo);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");
      ProdOrderComponent.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE UpdateItemTrackingOnProdOrderLine@274(ProductionOrder@1001 : Record 5405;LotNo@1002 : Code[20]);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Set Quantity & Lot No.");
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(ProdOrderLine.Quantity);
      ProdOrderLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE VerifyCapacityEntryPosted@201(ProdOrderNo@1000 : Code[20];ItemNo@1001 : Code[20]);
    VAR
      CapacityLedgerEntry@1002 : Record 5832;
    BEGIN
      WITH CapacityLedgerEntry DO BEGIN
        SETRANGE("Order Type","Order Type"::Production);
        SETRANGE("Order No.",ProdOrderNo);
        SETRANGE("Item No.",ItemNo);
        Assert.IsFalse(ISEMPTY,STRSUBSTNO(LedgEntryNotPostedErr,TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyTrackingOnRequisitionLine@61(ItemNo@1001 : Code[20];LotNo@1002 : Variant;Quantity@1004 : Variant);
    VAR
      RequisitionLine@1000 : Record 246;
      ItemTrackingMode@1003 : ' ,Assign Lot No.,Select Entries,Verify Entries';
    BEGIN
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Verify Entries");  // Enqueue for Page Handler - LotItemTrackingPageHandler.
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.SETRANGE("Accept Action Message",FALSE);
      RequisitionLine.FINDFIRST;
      LibraryVariableStorage.Enqueue(LotNo);  // Enqueue for Page Handler - LotItemTrackingPageHandler.
      LibraryVariableStorage.Enqueue(Quantity);  // Enqueue for Page Handler - LotItemTrackingPageHandler.
      RequisitionLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE VerifyDimensionSetEntry@30(DimensionSetID@1001 : Integer;DimensionCode@1002 : Code[20];DimensionValueCode@1003 : Code[20]);
    VAR
      DimensionSetEntry@1000 : Record 480;
    BEGIN
      DimensionSetEntry.GET(DimensionSetID,DimensionCode);
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DimensionValueCode);
    END;

    LOCAL PROCEDURE VerifyDimensionOnProductionOrderLine@10(Status@1001 : Option;ProductionOrderNo@1002 : Code[20];DimensionValue@1003 : Record 349);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      FindProductionOrderLine(ProdOrderLine,Status,ProductionOrderNo);
      VerifyDimensionSetEntry(ProdOrderLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE VerifyDimensionOnProdOrderComponent@11(Status@1001 : Option;ProductionOrderNo@1002 : Code[20];ItemNo@1003 : Code[20];DimensionValue@1004 : Record 349);
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      FindProdOrderComponent(ProdOrderComponent,Status,ProductionOrderNo,ItemNo);
      VerifyDimensionSetEntry(ProdOrderComponent."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE VerifyDimensionOnItemLedgerEntry@171(OrderNo@1000 : Code[20];ItemNo@1001 : Code[20];EntryType@1003 : Option;DimensionValue@1002 : Record 349);
    VAR
      ItemLedgerEntry@1004 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,OrderNo,ItemNo,EntryType);
      VerifyDimensionSetEntry(ItemLedgerEntry."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE VerifyDimensionsOnItemLedgerEntry@142(OrderNo@1000 : Code[20];ItemNo@1001 : Code[20];DimensionValue@1002 : Record 349;DimensionValue2@1003 : Record 349);
    VAR
      ItemLedgerEntry@1004 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,OrderNo,ItemNo,ItemLedgerEntry."Entry Type"::Consumption);
      VerifyDimensionSetEntry(ItemLedgerEntry."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code);
      VerifyDimensionSetEntry(ItemLedgerEntry."Dimension Set ID",DimensionValue2."Dimension Code",DimensionValue2.Code);
    END;

    LOCAL PROCEDURE VerifyDimensionsOnValueEntry@143(OrderNo@1003 : Code[20];ItemNo@1002 : Code[20];DimensionValue@1001 : Record 349;DimensionValue2@1000 : Record 349);
    VAR
      ValueEntry@1004 : Record 5802;
    BEGIN
      FindValueEntry(ValueEntry,ValueEntry."Item Ledger Entry Type"::Consumption,OrderNo,ItemNo);
      VerifyDimensionSetEntry(ValueEntry."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code);
      VerifyDimensionSetEntry(ValueEntry."Dimension Set ID",DimensionValue2."Dimension Code",DimensionValue2.Code);
    END;

    LOCAL PROCEDURE VerifyDimensionsOnItemJournalLine@144(ItemNo@1002 : Code[20];DimensionValue@1001 : Record 349;DimensionValue2@1000 : Record 349);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      FilterOnItemJournalLine(ItemJournalLine,ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      ItemJournalLine.SETRANGE("Item No.",ItemNo);
      ItemJournalLine.FINDFIRST;
      VerifyDimensionSetEntry(ItemJournalLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code);
      VerifyDimensionSetEntry(ItemJournalLine."Dimension Set ID",DimensionValue2."Dimension Code",DimensionValue2.Code);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntryPosted@234(ProdOrderNo@1001 : Code[20];ItemNo@1002 : Code[20];LotNo@1003 : Code[20]);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Order Type","Order Type"::Production);
        SETRANGE("Order No.",ProdOrderNo);
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Lot No.",LotNo);
        Assert.IsFalse(ISEMPTY,STRSUBSTNO(LedgEntryNotPostedErr,TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyTotalQuantityOnReservationPage@154(VAR Reservation@1000 : TestPage 498;SummaryType@1001 : Text[80]);
    BEGIN
      Reservation.FILTER.SETFILTER("Summary Type",SummaryType);
      Reservation."Reserve from Current Line".INVOKE;
      Reservation."Total Quantity".ASSERTEQUALS(DequeueNumber);
    END;

    LOCAL PROCEDURE VerifyQuantityOnReservationPage@160(Reservation@1000 : TestPage 498);
    BEGIN
      Reservation.QtyToReserveBase.ASSERTEQUALS(DequeueNumber);
      Reservation.QtyReservedBase.ASSERTEQUALS(DequeueNumber);
      Reservation.UnreservedQuantity.ASSERTEQUALS(DequeueNumber);
    END;

    LOCAL PROCEDURE VerifyProductionOrderLine@78(Status@1001 : Option;ProductionOrderNo@1002 : Code[20];ItemNo@1003 : Code[20];Quantity@1004 : Decimal;LocationCode@1005 : Code[10]);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      FindProductionOrderLine(ProdOrderLine,Status,ProductionOrderNo);
      ProdOrderLine.TESTFIELD("Item No.",ItemNo);
      ProdOrderLine.TESTFIELD(Quantity,Quantity);
      ProdOrderLine.TESTFIELD("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE VerifyProdOrderLineFromSalesLine@208(SalesLine@1000 : Record 37);
    VAR
      ProdOrder@1001 : Record 5405;
    BEGIN
      FindProdOrderBySourceNo(ProdOrder,SalesLine."Document No.");
      VerifyProductionOrderLine(
        ProdOrder.Status,ProdOrder."No.",SalesLine."No.",SalesLine.Quantity,SalesLine."Location Code");
    END;

    LOCAL PROCEDURE VerifyProdOrderLineDoesNotExist@210(SalesLine@1000 : Record 37);
    VAR
      ProdOrder@1001 : Record 5405;
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      FindProdOrderBySourceNo(ProdOrder,SalesLine."Document No.");
      ASSERTERROR FindProductionOrderLine(ProdOrderLine,ProdOrder.Status,ProdOrder."No.");
      Assert.ExpectedError(ProdOrderLineExistsErr);
    END;

    LOCAL PROCEDURE VerifyProdOrderLineBinCode@214(ExpectedBinCode@1003 : Code[20];SalesLine@1002 : Record 37);
    VAR
      ProdOrderLine@1000 : Record 5406;
      ProdOrder@1001 : Record 5405;
    BEGIN
      ProdOrder.SETRANGE("Source No.",SalesLine."Document No.");
      ProdOrder.FINDFIRST;

      WITH ProdOrderLine DO BEGIN
        SETRANGE(Status,Status::Released);
        SETRANGE("Prod. Order No.",ProdOrder."No.");
        FINDFIRST;
      END;

      Assert.AreEqual(ExpectedBinCode,ProdOrderLine."Bin Code",FromProductionBinCodeErr);
    END;

    LOCAL PROCEDURE VerifyProductionOrderRoutingLine@127(ProductionOrderNo@1002 : Code[20]);
    VAR
      ProdOrderRoutingLine@1000 : Record 5409;
    BEGIN
      FindProdOrderRoutingLine(ProdOrderRoutingLine,ProductionOrderNo);
      ProdOrderRoutingLine.TESTFIELD(
        "Expected Capacity Need",ProdOrderRoutingLine."Ending Date-Time" - ProdOrderRoutingLine."Starting Date-Time");
    END;

    LOCAL PROCEDURE VerifyProductionOrderRoutingLineTimes@257(ProductionOrderNo@1002 : Code[20];StartingTime@1001 : Time;EndingTime@1003 : Time);
    VAR
      ProdOrderRoutingLine@1000 : Record 5409;
    BEGIN
      FindProdOrderRoutingLine(ProdOrderRoutingLine,ProductionOrderNo);
      ProdOrderRoutingLine.TESTFIELD("Starting Time",StartingTime);
      ProdOrderRoutingLine.TESTFIELD("Ending Time",EndingTime);
    END;

    LOCAL PROCEDURE VerifyFirstProdOrderRoutingLineWaitTime@232(ProductionOrderNo@1002 : Code[20];WaitTime@1006 : Decimal);
    VAR
      ProdOrderRoutingLine@1000 : Record 5409;
    BEGIN
      FindProdOrderRoutingLine(ProdOrderRoutingLine,ProductionOrderNo);
      ProdOrderRoutingLine.TESTFIELD("Starting Date-Time",ProdOrderRoutingLine."Ending Date-Time" - WaitTime * 60 * 1000); // milliseconds to minutes
    END;

    LOCAL PROCEDURE VerifyLastProdOrderRoutingLineWaitTime@243(ProductionOrderNo@1002 : Code[20];WaitTime@1006 : Decimal);
    VAR
      ProdOrderRoutingLine@1000 : Record 5409;
    BEGIN
      ProdOrderRoutingLine.SETRANGE("Prod. Order No.",ProductionOrderNo);
      ProdOrderRoutingLine.FINDLAST;
      ProdOrderRoutingLine.TESTFIELD("Starting Date-Time",ProdOrderRoutingLine."Ending Date-Time" - WaitTime * 60 * 1000); // milliseconds to minutes
    END;

    LOCAL PROCEDURE VerifyLinesCountOnProdBOMWhereUsedPage@102(ProdBOMWhereUsed@1001 : TestPage 99000811;ExpectedLineCount@1002 : Integer);
    VAR
      ActualLineCount@1000 : Integer;
    BEGIN
      IF FORMAT(ProdBOMWhereUsed."Item No.") <> '' THEN
        REPEAT
          ActualLineCount += 1;
        UNTIL NOT ProdBOMWhereUsed.NEXT;
      Assert.AreEqual(ExpectedLineCount,ActualLineCount,NumberOfLineEqualErr);
    END;

    LOCAL PROCEDURE VerifyProdBOMWhereUsedPageVersion@109(ProdBOMWhereUsed@1001 : TestPage 99000811;ProdBOMVersionStatus@1002 : Option;ItemNo@1004 : Code[20];ItemNo2@1005 : Code[20];VersionCode@1006 : Code[20]);
    VAR
      ProductionBOMVersion@1003 : Record 99000779;
    BEGIN
      IF ProdBOMVersionStatus = ProductionBOMVersion.Status::Certified THEN BEGIN
        VerifyLinesCountOnProdBOMWhereUsedPage(ProdBOMWhereUsed,2);  // No. of Line value required on Production BOM Where Used Page. 2 signifies there are two Item Hierarchy.
        ProdBOMWhereUsed.FINDFIRSTFIELD("Item No.",ItemNo);
        ProdBOMWhereUsed."Version Code".ASSERTEQUALS(VersionCode);
      END ELSE BEGIN
        VerifyLinesCountOnProdBOMWhereUsedPage(ProdBOMWhereUsed,1);  // No. of Line value required on Production BOM Where Used Page. 1 signifies there is only one Item Hierachy because BOM Version status is closed for the second one.
        ProdBOMWhereUsed."Item No.".ASSERTEQUALS(ItemNo2);
      END;
    END;

    LOCAL PROCEDURE VerifyProdBOMWhereUsedPage@179(ProdBOMWhereUsed@1001 : TestPage 99000811;ProdBOMHeaderStatus@1002 : Option;ItemNo@1004 : Code[20]);
    VAR
      ProductionBOMHeader@1003 : Record 99000771;
    BEGIN
      CASE ProdBOMHeaderStatus OF
        ProductionBOMHeader.Status::Certified:
          BEGIN
            VerifyLinesCountOnProdBOMWhereUsedPage(ProdBOMWhereUsed,1);
            ProdBOMWhereUsed.FINDFIRSTFIELD("Item No.",ItemNo);
          END;
        ProductionBOMHeader.Status::Closed:
          VerifyLinesCountOnProdBOMWhereUsedPage(ProdBOMWhereUsed,0);
      END;
    END;

    LOCAL PROCEDURE VerifyProdOrderComponent@145(Status@1003 : Option;ProdOrderNo@1002 : Code[20];ItemNo@1001 : Code[20];RoutingLinkCode@1000 : Code[10]);
    VAR
      ProdOrderComponent@1004 : Record 5407;
    BEGIN
      FindProdOrderComponentForRoutingLinkCode(ProdOrderComponent,Status,ProdOrderNo,ItemNo,RoutingLinkCode);
      ProdOrderComponent.TESTFIELD("Remaining Quantity",ProdOrderComponent."Expected Quantity");
    END;

    LOCAL PROCEDURE VerifyProdOrderRoutingLine@271(ProdOrderNo@1001 : Code[20];WaitTime@1002 : Decimal);
    VAR
      ProdOrderRoutingLine@1000 : Record 5409;
    BEGIN
      WITH ProdOrderRoutingLine DO BEGIN
        SETRANGE(Status,Status::Released);
        SETRANGE("Prod. Order No.",ProdOrderNo);
        FINDLAST;
        TESTFIELD("Starting Date-Time","Ending Date-Time" - WaitTime * 60 * 1000);
      END;
    END;

    LOCAL PROCEDURE VerifyOutputJournalLine@165(Type@1001 : Option;OutputQuantity@1000 : Decimal);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      FilterOnItemJournalLine(ItemJournalLine,OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
      ItemJournalLine.SETRANGE(Type,Type);
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.TESTFIELD("Output Quantity",OutputQuantity);
    END;

    LOCAL PROCEDURE VerifyDimensionOnOutputJournalLine@172(ItemNo@1001 : Code[20];DimensionValue@1000 : Record 349);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      FilterOnItemJournalLine(ItemJournalLine,OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
      ItemJournalLine.SETRANGE("Item No.",ItemNo);
      ItemJournalLine.FINDSET;
      REPEAT
        VerifyDimensionSetEntry(ItemJournalLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code);
      UNTIL ItemJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@190(ItemNo@1001 : Code[20];UnitOfMeasureCode@1002 : Code[10]);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Purchase);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
    END;

    LOCAL PROCEDURE VerifyReleasedProductionOrder@200(ProductionOrderNo@1001 : Code[20];SourceNo@1002 : Code[20]);
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      ProductionOrder.GET(ProductionOrder.Status::Released,ProductionOrderNo);
      ProductionOrder.TESTFIELD("Source No.",SourceNo);
    END;

    LOCAL PROCEDURE VerifyReservationEntry@265(ItemNo@1000 : Code[20]);
    VAR
      ReservationEntry@1001 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDSET;
        REPEAT
          TESTFIELD(Binding,Binding::" ");
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyProdOrderLineStartingDateTime@281(ProductionOrder@1000 : Record 5405;ErrorMsg@1001 : Text);
    VAR
      ProdOrderLine@1004 : Record 5406;
    BEGIN
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
      Assert.AreEqual(ProductionOrder."Due Date" - 2,DT2DATE(ProdOrderLine."Starting Date-Time"),ErrorMsg);
    END;

    [ModalPageHandler]
    PROCEDURE LotItemTrackingPageHandler@1(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      CASE LibraryVariableStorage.DequeueInteger OF
        ItemTrackingMode::"Assign Lot No.":
          ItemTrackingLines."Assign Lot No.".INVOKE;
        ItemTrackingMode::"Select Entries":
          ItemTrackingLines."Select Entries".INVOKE;
        ItemTrackingMode::"Verify Entries":
          BEGIN
            ItemTrackingLines."Lot No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
            ItemTrackingLines."Quantity (Base)".ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
          END;
        ItemTrackingMode::"Set Lot No.":
          ItemTrackingLines."Lot No.".SETVALUE(LibraryVariableStorage.DequeueText);
        ItemTrackingMode::"Set Quantity & Lot No.":
          BEGIN
            ItemTrackingLines."Lot No.".SETVALUE(LibraryVariableStorage.DequeueText);
            ItemTrackingLines."Quantity (Base)".SETVALUE(LibraryVariableStorage.DequeueDecimal);
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SerialItemTrackingPageHandler@111(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      AssignSerialNo@1006 : Variant;
      AssignSerialNo2@1001 : Boolean;
      LineCount@1002 : Integer;
    BEGIN
      LibraryVariableStorage.Dequeue(AssignSerialNo);
      AssignSerialNo2 := AssignSerialNo;  // Assign Variant to Boolean.

      IF AssignSerialNo2 THEN
        ItemTrackingLines."Assign Serial No.".INVOKE
      ELSE BEGIN
        ItemTrackingLines.LAST;
        REPEAT
          ItemTrackingLines."Quantity (Base)".ASSERTEQUALS(1);  // Using One for Serial No.
          ItemTrackingLines."Qty. to Handle (Base)".ASSERTEQUALS(1);  // Using One for Serial No.
          Assert.IsTrue(ItemTrackingLines."Serial No.".VALUE > ' ',SerialNoErr);
          LineCount += 1;
        UNTIL NOT ItemTrackingLines.PREVIOUS;
        Assert.AreEqual(DequeueNumber,LineCount,NumberOfLineEqualErr);  // Verify Number of line - Tracking Line.
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@5(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE OrderPlanningPageHandler@75(VAR OrderPlanning@1000 : TestPage 5522);
    BEGIN
      OrderPlanning.CalculatePlan.INVOKE;
      OrderPlanning."Demand Order No.".ASSERTEQUALS(DequeueText);
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@90(VAR Reservation@1000 : TestPage 498);
    BEGIN
      VerifyQuantityOnReservationPage(Reservation);
      VerifyTotalQuantityOnReservationPage(Reservation,SummaryTypeItemLedgerEntryTxt);
      VerifyTotalQuantityOnReservationPage(Reservation,SummaryTypePurchaseLineOrderTxt);
    END;

    [ModalPageHandler]
    PROCEDURE ReservationModalPageHandler@260(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation.CancelReservationCurrentLine.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationDetailPageHandler@76(VAR Reservation@1000 : TestPage 498);
    VAR
      ReserveFromCurrentLine@1005 : Variant;
      ReserveFromCurrentLine2@1006 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(ReserveFromCurrentLine);
      ReserveFromCurrentLine2 := ReserveFromCurrentLine;  // Assign Variant to Boolean.
      IF ReserveFromCurrentLine2 THEN
        Reservation."Reserve from Current Line".INVOKE
      ELSE BEGIN
        VerifyQuantityOnReservationPage(Reservation);
        Reservation."Total Quantity".ASSERTEQUALS(DequeueNumber);
        Reservation.TotalReservedQuantity.ASSERTEQUALS(DequeueNumber);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE SalesOrderPlanningPageHandler@153(VAR SalesOrderPlanning@1000 : TestPage 99000883);
    BEGIN
      SalesOrderPlanning."Item No.".ASSERTEQUALS(DequeueText);
      SalesOrderPlanning.Available.ASSERTEQUALS(DequeueNumber);
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreatePageHandler@85(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CreateOrderFromSalesModalPageHandler@182(VAR CreateOrderFromSales@1000 : Page 99000884;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::Yes;
    END;

    [ModalPageHandler]
    PROCEDURE ProductionJournalPageHandler@82(VAR ProductionJournal@1001 : TestPage 5510);
    VAR
      ItemJournalLine@1000 : Record 83;
      ConsumptionQuantity@1002 : Variant;
    BEGIN
      ProductionJournal.FILTER.SETFILTER("Entry Type",FORMAT(ItemJournalLine."Entry Type"::Consumption));
      LibraryVariableStorage.Dequeue(ConsumptionQuantity);
      ProductionJournal.Quantity.ASSERTEQUALS(ConsumptionQuantity);
    END;

    [ModalPageHandler]
    PROCEDURE ProductionJournalPageHandler2@251(VAR ProductionJournal@1001 : TestPage 5510);
    VAR
      ItemJournalLine@1000 : Record 83;
      Quantity@1003 : Decimal;
    BEGIN
      ProductionJournal.FILTER.SETFILTER("Entry Type",FORMAT(ItemJournalLine."Entry Type"::Consumption));
      Quantity := LibraryVariableStorage.PeekDecimal(3); // third index variable
      ProductionJournal.ItemTrackingLines.INVOKE;
      ProductionJournal.Quantity.SETVALUE(Quantity);
      LibraryVariableStorage.Enqueue(PostingQst); // Enqueued for ConfirmHandler
      LibraryVariableStorage.Enqueue(JournalPostedMsg); // Enqueued for MessageHandler
      ProductionJournal.Post.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostProdJournalByPageHandler@166(VAR ProductionJournal@1000 : TestPage 5510);
    VAR
      ProductionOrderNo@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ProductionOrderNo);
      ProductionJournal.FILTER.SETFILTER("Document No.",ProductionOrderNo);
      ProductionJournal.Post.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE EditDimensionSetEntriesPageHandler@191(VAR EditDimensionSetEntries@1000 : TestPage 480);
    VAR
      NewDimensionValueCode@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(NewDimensionValueCode);
      EditDimensionSetEntries.DimensionValueCode.SETVALUE(NewDimensionValueCode);
      EditDimensionSetEntries.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@88(Message@1000 : Text[1024]);
    VAR
      ExpectedMessage@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);
      Assert.IsTrue(AreSameMessages(Message,ExpectedMessage),Message);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmQstHandlerTRUE@38(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);
      Assert.IsTrue(AreSameMessages(Question,ExpectedMessage),Question);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTRUE@148(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE PostUpdatedProdJournalPageHandler@192(VAR ProductionJournal@1000 : TestPage 5510);
    VAR
      OutputQty@1001 : Variant;
      SetupTime@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(OutputQty);
      LibraryVariableStorage.Dequeue(SetupTime);
      LibraryVariableStorage.Enqueue(JournalLinePostedMsg); // Required inside MessageHandler.
      ProductionJournal.FIRST;
      ProductionJournal."Output Quantity".SETVALUE(OutputQty);
      ProductionJournal."Setup Time".SETVALUE(SetupTime);
      ProductionJournal.Post.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE ProdOrderCreatedMessageHandler@240(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Manufacturing] [Production Order] [SCM]
      Tests for Production Orders:

       1. Verify Item Tracking on Requisition Line after calculate regenerative plan for Production Order and Tracking on Production Order Component.
       2. Verify Item Tracking on Requisition Line after calculate regenerative plan for Sales Order and Tracking on Sales Line.
       3. Verify Error message for create Item when Create duplicate Item.
       4. Verify Item Tracking on Purchase line after re-calculate regenerative plan. Calculate regenerative plan and Carry Out Action Message and Tracking on new created Purchase Order.
       5. Verify Default Dimension for Work Center after updating dimension on Work Center.
       6. Verify Dimension on Simulated Production Order. Dimension update on Parent and Child Item.
       7. Verify Dimension on Released Production after add new dimension on Production Line and change Status Simulated to Released Production Order.
       8. Verify Dimension on Released Production after add new dimension on Component Line and change Status Simulated to Released Production Order.
       9. Verify Dimension on Consumption Journal Line after add new dimension on Component line.
      10. Verify Dimension on Item Ledger Entry and Value Entry after posting of Consumption Journal Line.
      11. Verify Column Caption of Production Forecast Page when View by as Day.
      12. Verify Column Caption of Production Forecast Page when View by as Week.
      13. Verify Column Caption of Production Forecast Page when View by as Month.
      14. Verify Column Caption of Production Forecast Page when View by as Quarter.
      15. Verify Column Caption of Production Forecast Page when View by as Year.
      16. Verify Column Caption of Production Forecast Page when View by as Accounting Period.
      17. Verify on Order Planning, cursor highlights on the respective Released Production Order in Order Planning when Planning calculates from Released Production Order.
      18. Verify Quantities on Reservation Page, Reservation though Sales Order with different variant code as Production Order.
      19. Verify Quantities on Reservation Page, Reservation though Sales Order with same variant code as Production Order.
      20. Verify Quantities on Reservation Page, Reservation though Multiple Sales Order with same variant code as Production Order.
      21. Verify Quantities on Reservation Page, Reservation though Sales Order to Purchase Order and Posted Purchase Order (Item Ledger Entry).
      22. Verify Sales Order Planning Page, Open from Sales Order with Tracked Item.
      23. Verify Firm Planned Production Order. Create through Sales Order Planning with Tracked Item.
      24. Verify Tracking line on Firm Planned Production Order, Created through Sales Order Planning and assign Serial No Tracking and calculate regenerative plan.
      25. Verify Error message when Change Production Order Status from Firm Planned to Released. Production Item Flushing Method as Forward, Component with Lot No Tracking and Component Quantity more than Inventory.
      26. Verify Error message when change Production Order Status from Firm Planned to Released. Production Item Flushing Method as Forward, Tracking not assigned on Production Order Component.
      27. Verify Error message when Refresh Released Production Order, with Production BOM Status is not certified on Item.
      28. Verify Error message when Post Consumption Journal after Production Order Status Changed from Released to Finished.
      29. Verify Error message when Production created from Sales Order with Replenishment System as Purchase on Item and SKU.
      30. Verify Production Order created from Sales Order with Replenishment System as Purchase on Item and Prod. Order on SKU.
      31. Verify Production BOM Version on Item when running Where-Used function for Production BOM Version Status as Certified.
      32. Verify Production BOM Version not updated on Item when running Where-Used function for Production BOM Version Status as Closed.
      33. Verify Components with Consumption Quantity of an Item on Production Journal when Released Production Order is created without Whse Pick with Blue Location.
      34. Verify Components with Consumption Quantity of an Item on Production Journal when Released Production Order is created without Whse Pick with Silver Location.
      35. Verify Components with Consumption Quantity of an Item on Production Journal when Released Production Order is created without Whse Pick with White Location.
      36. Verify Components with Consumption Quantity of an Item on Production Journal when Released Production Order is created without Whse Pick with Green Location.
      37. Verify Production Order Components when Flushing Method = Backward and with Routing Link Code.
      38. Verify Output Journal Line for Work Center and Machine Center when Flushing Method = Backward and with Routing Link Code.
      39. Verify Remaining Quantity in Production Order Components when Flushing Method = Backward and with Routing Link Code after posting of Output Journal.
      40. Verify Item Ledger Entry for Posted Purchase Order with Tracking and update Purchase Unit of Measure on Item.
      41. Verify Released Production order for change status on Firm Planned Production Order when Select Entries is used for LOT No. in Item Tracking on Production Component.
      42. Verify Expected Capacity Need on Released Production Order that was generated from Simulated Production order.
      43. Verify Expected Capacity Need on Firm Planned Production Order that was generated from Simulated Production order.
      44. Verify Production BOM on Item when running Where-Used function for Production BOM Status as Certified.
      45. Verify Production BOM on Item when running Where-Used function for Production BOM Status as Closed.
      46. Verify dimension on Item Ledger Entry and Prod. Order Component after updating dimension on Released Production Order line and posting the Production Journal.
      47. Verify dimension on Item Ledger Entry and Prod. Order Component after updating dimension by show dimensions on Released Production Order line and posting the Production Journal.
      48. Verify dimension on Item Ledger Entry and Prod. Order Component after updating dimension on Released Production Order and posting the Production Journal.
      49. Verify dimension on Output Journal with routing exploded after updating dimension on Released Production Order line which has routing.
      50. Verify dimension on Output Journal with routing exploded after updating dimension on Released Production Order line which has not routing.
      51. Verify Production Journal with empty Bin Code can be posted if there is no actual inventory item posting.
      52. Verify Production Journal with empty Bin Code cannot be posted if there is actual output.
      53. Verify Production Journal consumption entry can be posted with correct bin code.
      54. Verify Production Journal output entry can be posted with correct bin code.
      55. When production order uses sales order as a source and location doesn't have 'From-Production Bin Code', bin code in prod. order line is taken from Sales Line.
      56. Can post Production Journal consumption for lot tracked Item, if reservation Entry exist.
      57. When setting Production Order Routing Line Wait Time, its starting date-time does not change.
      57. When refreshing back Production Order with different Shop Calendars for Routing lines, first Prod. Order Routing Line starting-ending time is within worktime.
      58. When setting Production Order Routing Line Wait Time, it's starting date-time does not change.

      Covers Test cases : 294786
      --------------------------------------------------------------------------
       Test Function                                                   TFS ID
      --------------------------------------------------------------------------
       ItemTrackingOnRequisitionLineForProductionOrderComponent        127654
       ItemTrackingOnRequisitionLineForSalesOrder                      127654
       NewItemWithOldItemNoError                                       127656
       ItemTrackingOnPurchaseLineWithCalcRegenPlanTwice                127656

      Covers Test cases : 294787
      ----------------------------------------------------------------------------------------
       Test Function                                                                   TFS ID
      ----------------------------------------------------------------------------------------
       WorkCenterWithDimension                                                         127959
       SimulatedProductionOrderWithDimension                                           127959
       SimulatedProdOrderWithNewDimensionOnProdLineAndChangeStatusToReleased           127959
       SimulatedProdOrderWithNewDimensionOnComponentLineAndChangeStatusToReleased      127959
       ReleasedProdOrderWithNewDimensionOnComponentLineAndConsumptionJournal           127959
       ReleasedProdOrderWithNewDimensionOnComponentLineAndPostConsumptionJournal       127959

      Covers Test cases : 294789
      ---------------------------------------------------------------------------
       Test Function                                                       TFS ID
      ---------------------------------------------------------------------------
       ProductionForecastWithPeriodTypeDay                                 251822
       ProductionForecastWithPeriodTypeWeek                                251822
       ProductionForecastWithPeriodTypeMonth                               251822
       ProductionForecastWithPeriodTypeQuarter                             251822
       ProductionForecastWithPeriodTypeYear                                251822
       ProductionForecastWithPeriodTypeAccountingPeriod                    251822

      Covers Test cases : 297435
      ----------------------------------------------------------------------------------------
       Test Function                                                                   TFS ID
      ---------------------------------------------------------------------------------------
       OrderPlanningForReleasedProductionOrder                                        263331

      Covers Test cases : 298540
      ----------------------------------------------------------------------------------------
       Test Function                                                                   TFS ID
      ----------------------------------------------------------------------------------------
       ReservationFromSalesOrderUsingProductionOrderWithDifferentVariantCode           124105
       ReservationFromSalesOrderUsingProductionOrderWithSameVariantCode                124105
       ReservationFromMultipleSalesOrderUsingProductionOrder                           124105
       ReservationFromSalesOrderUsingPurchaseOrderPosting                              124106

      Covers Test cases : 295211
      ----------------------------------------------------------------------------------------
       Test Function                                                                   TFS ID
      ----------------------------------------------------------------------------------------
       SalesOrderPlanningWithTrackedItem                                               127523
       FirmPlannedProductionOrderFromSalesOrderPlanningWithTrackedItem                 127523
       SerialNoTrackingOnProductionLineWithCalcRegenPlan                               127523
       FlushingMethodForwardWithLotNoChangeProductionStatusToReleasedError             127567

      Covers Test Cases for WI - 298993
      ----------------------------------------------------------------------------------------
       Test Function Name                                                              TFS ID
      ----------------------------------------------------------------------------------------
      FlushingMethodForwardWithoutTrackingOnProdOrderComponentLotNoError               135558

      Covers Test Cases for WI - 302727
      ----------------------------------------------------------------------------------------
       Test Function Name                                                              TFS ID
      ----------------------------------------------------------------------------------------
      ProductionBOMNotCertifiedAndRefreshReleasedProdOrderError                 240687, 241017
      ConsumptionPostingForFinishedProdOrderError                                      260754
      ProdOrderFromSalesOrderWithReplenishmentAsPurchaseOnSKUError                     237506
      ProdOrderFromSalesOrderWithReplenishmentAsProdOrderOnSKU                         237506

      Covers Test Cases for WI - 299173
      ----------------------------------------------------------------------------------------
       Test Function Name                                                              TFS ID
      ----------------------------------------------------------------------------------------
       ProdBOMWhereUsedWithProdBOMVersionCertified                                     263886
       ProdBOMWhereUsedWithProdBOMVersionClosed                                        263886
       ConsumptionQuantityOnProdJournalWithLocationBlue                                260271
       ConsumptionQuantityOnProdJournalWithLocationSilver                              260271
       ConsumptionQuantityOnProdJournalWithLocationWhite                               260271
       ConsumptionQuantityOnProdJournalWithLocationGreen                               260271

      Covers Test Cases for WI - 302729
      ----------------------------------------------------------------------------------------
       Test Function Name                                                              TFS ID
      ----------------------------------------------------------------------------------------
       ProdOrderComponentWithDiffRoutingLink                                           257903
       OutputJournalForWorkAndMachineCenter                                            257903
       RemainingQuantityOnProdOrderComponentWithRoutingLink                            257903
       PurchaseOrderWithTrackingUsingPurchaseUnitOfMeasure                             262255
       FirmPlannedProdOrderWithTrackingOnComponentAndChangeStatus                      262255

      Covers Test Cases for WI - 351131
      ----------------------------------------------------------------------------------------
       Test Function Name                                                              TFS ID
      ----------------------------------------------------------------------------------------
       SimulatedProductionOrderChangeStatusToReleased                                  351131
       SimulatedProductionOrderChangeStatusToFirmPlanned                               351131

      Covers Test Cases for WI - 351470
      ----------------------------------------------------------------------------------------
       Test Function Name                                                              TFS ID
      ----------------------------------------------------------------------------------------
      ProdBOMWhereUsedWithProdBOMCertified                                             351470
      ProdBOMWhereUsedWithProdBOMClosed                                                351470

      Covers Test Cases for WI - 89378
      ----------------------------------------------------------------------------------------
       Test Function Name                                                              TFS ID
      ----------------------------------------------------------------------------------------
      UpdateDimensionOnReleasedProdOrderLineByProdLine                                  85176
      UpdateDimensionOnReleasedProdOrderLineByShowDimensionsOnLine                      85176
      UpdateDimensionOnReleasedProdOrderLineByProdOrder                                 85176
      OutputJournalWithRouting                                                          85176
      OutputJournalWithoutRouting                                                       85176

      Covers Test Cases for WI - 101382
      ----------------------------------------------------------------------------------------
       Test Function Name                                                              TFS ID
      ----------------------------------------------------------------------------------------
      PostZeroQtyProdJournalWithLocationSilverAndEmptyBinCode                          101382

      Covers Test Cases for WI - 358868
      ----------------------------------------------------------------------------------------
       Test Function Name                                                              TFS ID
      ----------------------------------------------------------------------------------------
      TFS358868_CapacityEntryPostingDoesNotRequireBin                                  358868
      TFS358868_OutputEntryPostingRequiresBin                                          358868
      TFS358868_ConsumptionPostingWithBin                                              358868
      TFS358868_OutputPostingWithBin                                                   358868
      ProdOrderLineBinCopiedFromSalesLineWhenFromProdBinCodeBlank                      361569

      Covers Test Cases for WI - 363503
      ----------------------------------------------------------------------------------------
       Test Function Name                                                              TFS ID
      ----------------------------------------------------------------------------------------
      LotTrackingOnProductionOrderComponent                                            363503
      ProdOrderRoutingWithTwoShopCalendars                                             364305
      RefreshProdOrderRoutingLineWaitTime                                              364340
      RefreshProdOrderRtngLineSendAheadRunTimeDecreases                                364340
      ProdOrderRoutingWithTwoShopCalendars                                             128113
      RefreshProdOrderRoutingLineWaitTime                                              364340

      Covers Test Cases for WI - 374949
      ----------------------------------------------------------------------------------------
       Test Function Name                                                              TFS ID
      ----------------------------------------------------------------------------------------
      CancelReservationOnProdOrderFromSalesOrderPlanning                               136404
    }
    END.
  }
}

